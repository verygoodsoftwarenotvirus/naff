package auth

import (
	jen "gitlab.com/verygoodsoftwarenotvirus/naff/forks/jennifer/jen"
	"gitlab.com/verygoodsoftwarenotvirus/naff/lib/constants"
	utils "gitlab.com/verygoodsoftwarenotvirus/naff/lib/utils"
	"gitlab.com/verygoodsoftwarenotvirus/naff/models"
)

func httpRoutesTestDotGo(proj *models.Project) *jen.File {
	code := jen.NewFile(packageName)

	utils.AddImports(proj, code)

	code.Add(
		jen.Func().ID("attachCookieToRequestForTest").Params(
			jen.ID("t").PointerTo().Qual("testing", "T"),
			jen.ID("s").PointerTo().ID("Service"),
			jen.ID(constants.RequestVarName).PointerTo().Qual("net/http", "Request"),
			jen.ID("user").PointerTo().Qual(proj.ModelsV1Package(), "User"),
		).Params(
			jen.Qual("context", "Context"),
			jen.PointerTo().Qual("net/http", "Request"),
		).Block(
			jen.ID("t").Dot("Helper").Call(),
			jen.Line(),
			jen.List(jen.ID(constants.ContextVarName), jen.ID("sessionErr")).Assign().ID("s").Dot("sessionManager").Dot("Load").Call(
				jen.ID(constants.RequestVarName).Dot("Context").Call(),
				jen.EmptyString(),
			),
			utils.RequireNoError(jen.ID("sessionErr"), nil),
			utils.RequireNoError(
				jen.ID("s").Dot("sessionManager").Dot("RenewToken").Call(jen.ID(constants.ContextVarName)),
				nil,
			),
			jen.Line(),
			jen.Comment("Then make the privilege-level change."),
			jen.ID("s").Dot("sessionManager").Dot("Put").Call(
				jen.ID(constants.ContextVarName),
				jen.ID("sessionInfoKey"),
				jen.ID("user").Dot("ToSessionInfo").Call(),
			),
			jen.Line(),
			jen.List(
				jen.ID("token"),
				jen.Underscore(),
				jen.Err(),
			).Assign().ID("s").Dot("sessionManager").Dot("Commit").Call(jen.ID(constants.ContextVarName)),
			utils.AssertNotEmpty(jen.ID("token"), nil),
			utils.AssertNoError(jen.Err(), nil),
			jen.Line(),
			jen.List(jen.ID("c"), jen.Err()).Assign().ID("s").Dot("buildCookie").Call(
				jen.ID("token"),
				jen.Qual("time", "Now").Call().Dot("Add").Call(jen.ID("s").Dot("config").Dot("CookieLifetime")),
			),
			utils.RequireNoError(jen.Err(), nil),
			jen.ID(constants.RequestVarName).Dot("AddCookie").Call(jen.ID("c")),
			jen.Line(),
			jen.Return(
				jen.ID(constants.ContextVarName),
				jen.ID(constants.RequestVarName).Dot("WithContext").Call(jen.ID(constants.ContextVarName)),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_DecodeCookieFromRequest").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/api/v1/something"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(constants.CtxVar(), jen.ID(constants.RequestVarName)).Assign().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("DecodeCookieFromRequest").Call(
					constants.CtxVar(),
					jen.ID(constants.RequestVarName),
				),
				utils.AssertNoError(jen.Err(), nil),
				utils.AssertNotNil(jen.ID("cookie"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with invalid cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/api/v1/something"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.Comment("begin building bad cookie."),
				jen.Comment("NOTE: any code here is duplicated from service.buildAuthCookie"),
				jen.Comment("any changes made there might need to be reflected here."),
				jen.ID("c").Assign().AddressOf().Qual("net/http", "Cookie").Valuesln(
					jen.ID("Name").MapAssign().ID("CookieName"),
					jen.ID("Value").MapAssign().Lit("blah blah blah this is not a real cookie"),
					jen.ID("Path").MapAssign().Lit("/"),
					jen.ID("HttpOnly").MapAssign().True(),
				),
				jen.Comment("end building bad cookie."),
				jen.ID(constants.RequestVarName).Dot("AddCookie").Call(jen.ID("c")),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("DecodeCookieFromRequest").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID(constants.RequestVarName)),
				utils.AssertError(jen.Err(), nil),
				utils.AssertNil(jen.ID("cookie"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/api/v1/something"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("DecodeCookieFromRequest").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID(constants.RequestVarName)),
				utils.AssertError(jen.Err(), nil),
				utils.AssertEqual(jen.Err(), jen.Qual("net/http", "ErrNoCookie"), nil),
				utils.AssertNil(jen.ID("cookie"), nil),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_WebsocketAuthFunction").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"with valid oauth2 client",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "OAuth2Client"),
				jen.Line(),
				jen.ID("oacv").Assign().AddressOf().ID("mockOAuth2ClientValidator").Values(),
				jen.ID("oacv").Dot("On").Callln(
					jen.Lit("ExtractOAuth2ClientFromRequest"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*http.Request")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("OAuth2Client")), jen.Nil()),
				jen.ID("s").Dot("oauth2ClientsService").Equals().ID("oacv"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("WebsocketAuthFunction").Call(jen.ID(constants.RequestVarName)),
				utils.AssertTrue(jen.ID("actual"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("oacv"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with valid cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVar(proj, "OAuth2Client"),
				jen.Line(),
				jen.ID("oacv").Assign().AddressOf().ID("mockOAuth2ClientValidator").Values(),
				jen.ID("oacv").Dot("On").Callln(
					jen.Lit("ExtractOAuth2ClientFromRequest"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*http.Request")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("OAuth2Client")), constants.ObligatoryError()),
				jen.ID("s").Dot("oauth2ClientsService").Equals().ID("oacv"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("WebsocketAuthFunction").Call(jen.ID(constants.RequestVarName)),
				utils.AssertTrue(jen.ID("actual"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("oacv"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with nothing",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "OAuth2Client"),
				jen.Line(),
				jen.ID("oacv").Assign().AddressOf().ID("mockOAuth2ClientValidator").Values(),
				jen.ID("oacv").Dot("On").Callln(
					jen.Lit("ExtractOAuth2ClientFromRequest"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*http.Request")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("OAuth2Client")), constants.ObligatoryError()),
				jen.ID("s").Dot("oauth2ClientsService").Equals().ID("oacv"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("WebsocketAuthFunction").Call(jen.ID(constants.RequestVarName)),
				utils.AssertFalse(jen.ID("actual"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("oacv"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_fetchUserFromCookie").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(constants.CtxVar(), jen.ID(constants.RequestVarName)).Assign().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actualUser"), jen.Err()).Assign().ID("s").Dot("fetchUserFromCookie").Call(
					constants.CtxVar(),
					jen.ID(constants.RequestVarName),
				),
				utils.AssertEqual(jen.ID(utils.BuildFakeVarName("User")), jen.ID("actualUser"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.Line(),
				jen.List(jen.ID("actualUser"), jen.Err()).Assign().ID("s").Dot("fetchUserFromCookie").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID(constants.RequestVarName)),
				utils.AssertNil(jen.ID("actualUser"), nil),
				utils.AssertError(jen.Err(), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.ID("expectedError").Assign().Qual("errors", "New").Call(jen.Lit("blah")),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), jen.ID("expectedError")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actualUser"), jen.Err()).Assign().ID("s").Dot("fetchUserFromCookie").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID(constants.RequestVarName)),
				utils.AssertNil(jen.ID("actualUser"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_LoginHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusNoContent"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				utils.AssertNotEmpty(jen.ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching login data from request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), utils.Error("arbitrary")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				utils.AssertEmpty(jen.ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding error fetching login data",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Callln(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*httptest.ResponseRecorder")),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.ErrorResponse")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), utils.Error("arbitrary")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				utils.AssertEmpty(jen.ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("ed", "udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with invalid login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				utils.AssertEmpty(jen.ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), constants.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				utils.AssertEmpty(jen.ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error building cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("cb").Assign().AddressOf().ID("mockCookieEncoderDecoder").Values(),
				jen.ID("cb").Dot("On").Callln(
					jen.Lit("Encode"),
					jen.ID("CookieName"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("string")),
				).Dot("Return").Call(jen.EmptyString(), constants.ObligatoryError()),
				jen.ID("s").Dot("cookieManager").Equals().ID("cb"),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				utils.AssertEmpty(jen.ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("cb", "udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error building cookie and error encoding cookie response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("cb").Assign().AddressOf().ID("mockCookieEncoderDecoder").Values(),
				jen.ID("cb").Dot("On").Callln(
					jen.Lit("Encode"),
					jen.ID("CookieName"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("string")),
				).Dot("Return").Call(jen.EmptyString(), constants.ObligatoryError()),
				jen.ID("s").Dot("cookieManager").Equals().ID("cb"),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				utils.AssertEmpty(jen.ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("cb", "udb", "authr"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_LogoutHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("LogoutHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				jen.ID("actualCookie").Assign().ID(constants.ResponseVarName).Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")),
				utils.AssertContains(jen.ID("actualCookie"), jen.Lit("Max-Age=0"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("s").Dot("LogoutHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error building cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.ID("s").Dot("cookieManager").Equals().Qual("github.com/gorilla/securecookie", "New").Callln(
					jen.Qual("github.com/gorilla/securecookie", "GenerateRandomKey").Call(jen.Zero()),
					jen.Index().Byte().Call(jen.EmptyString()),
				),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("LogoutHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_fetchLoginDataFromRequest").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.List(jen.ID("loginData"), jen.Err()).Assign().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.RequireNotNil(jen.ID("loginData"), nil),
				utils.AssertEqual(jen.ID("loginData").Dot("user"), jen.ID(utils.BuildFakeVarName("User")), nil),
				utils.AssertNil(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without login data attached to request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.Err()).Equals().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID(constants.RequestVarName)),
				utils.AssertError(jen.Err(), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with DB error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.List(jen.Underscore(), jen.Err()).Equals().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID(constants.RequestVarName)),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), constants.ObligatoryError()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("userLoginInputMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("LoginData")))),
				jen.List(jen.Underscore(), jen.Err()).Equals().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID(constants.RequestVarName)),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_validateLogin").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTest(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(constants.CtxVar(), jen.ID(utils.BuildFakeVarName("Input"))),
				utils.AssertTrue(jen.ID("actual"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with too weak a password hash",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Qual(proj.InternalAuthV1Package(), "ErrCostTooLow")),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
				).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("UpdateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(constants.CtxVar(), jen.ID(utils.BuildFakeVarName("Input"))),
				utils.AssertTrue(jen.ID("actual"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr", "udb"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with too weak a password hash and error hashing the password",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedErr").Assign().Qual("errors", "New").Call(jen.Lit("arbitrary")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Qual(proj.InternalAuthV1Package(), "ErrCostTooLow")),
				jen.Line(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
				).Dot("Return").Call(jen.EmptyString(), jen.ID("expectedErr")),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(constants.CtxVar(), jen.ID(utils.BuildFakeVarName("Input"))),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with too weak a password hash and error updating user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedErr").Assign().Qual("errors", "New").Call(jen.Lit("arbitrary")),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Qual(proj.InternalAuthV1Package(), "ErrCostTooLow")),
				jen.Line(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
				).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("UpdateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(jen.ID("expectedErr")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(constants.CtxVar(), jen.ID(utils.BuildFakeVarName("Input"))),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr", "udb"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedErr").Assign().Qual("errors", "New").Call(jen.Lit("arbitrary")),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), jen.ID("expectedErr")),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(constants.CtxVar(), jen.ID(utils.BuildFakeVarName("Input"))),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with invalid login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("LoginData")).Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"), // ctx
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("Password"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("LoginData")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(constants.CtxVar(), jen.ID(utils.BuildFakeVarName("Input"))),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_StatusHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"normal operation",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().Qual("net/http/httptest", "NewRecorder").Call(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(
					jen.Qual("net/http", "MethodPost"),
					jen.Lit("https://blah.com"),
					jen.Nil(),
				),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("s").Dot("StatusHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().Qual("net/http/httptest", "NewRecorder").Call(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(
					jen.Qual("net/http", "MethodPost"),
					jen.Lit("https://blah.com"),
					jen.Nil(),
				),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("ID"),
				).Dot("Return").Call(
					jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()),
					constants.ObligatoryError(),
				),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("s").Dot("StatusHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().Qual("net/http/httptest", "NewRecorder").Call(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(
					jen.Qual("net/http", "MethodPost"),
					jen.Lit("https://blah.com"),
					jen.Nil(),
				),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.Line(),
				jen.ID("udb").Assign().AddressOf().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Callln(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*httptest.ResponseRecorder")),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.StatusResponse")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("StatusHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb", "ed"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_CycleSecretHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"normal operation",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.ID(constants.ResponseVarName).Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodPost"), jen.Lit("https://blah.com"), jen.Nil()),
				utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.ID(constants.RequestVarName)).Equals().ID("attachCookieToRequestForTest").Call(
					jen.ID("t"),
					jen.ID("s"),
					jen.ID(constants.RequestVarName),
					jen.ID(utils.BuildFakeVarName("User")),
				),
				jen.ID("c").Assign().ID(constants.RequestVarName).Dot("Cookies").Call().Index(jen.Zero()),
				jen.Line(),
				jen.Var().ID("token").String(),
				utils.AssertNoError(
					jen.ID("s").Dot("cookieManager").Dot("Decode").Call(
						jen.ID("CookieName"),
						jen.ID("c").Dot("Value"),
						jen.AddressOf().ID("token"),
					),
					nil,
				),
				jen.ID("s").Dot("CycleSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertError(
					jen.ID("s").Dot("cookieManager").Dot("Decode").Call(
						jen.ID("CookieName"),
						jen.ID("c").Dot("Value"),
						jen.AddressOf().ID("token"),
					),
					nil,
				),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_buildCookie").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("buildCookie").Call(
					jen.Lit("example"),
					jen.Qual("time", "Now").Call().Dot("Add").Call(jen.ID("s").Dot("config").Dot("CookieLifetime")),
				),
				utils.AssertNotNil(jen.ID("cookie"), nil),
				utils.AssertNoError(jen.Err(), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with erroneous cookie building setup",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("s").Dot("cookieManager").Equals().Qual("github.com/gorilla/securecookie", "New").Callln(
					jen.Qual("github.com/gorilla/securecookie", "GenerateRandomKey").Call(jen.Zero()),
					jen.Index().Byte().Call(jen.EmptyString()),
				),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("buildCookie").Call(
					jen.Lit("example"),
					jen.Qual("time", "Now").Call().Dot("Add").Call(jen.ID("s").Dot("config").Dot("CookieLifetime")),
				),
				utils.AssertNil(jen.ID("cookie"), nil),
				utils.AssertError(jen.Err(), nil),
			),
		),
		jen.Line(),
	)

	return code
}
