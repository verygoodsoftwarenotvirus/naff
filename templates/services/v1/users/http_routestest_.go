package users

import (
	jen "gitlab.com/verygoodsoftwarenotvirus/naff/forks/jennifer/jen"
	"gitlab.com/verygoodsoftwarenotvirus/naff/lib/constants"
	utils "gitlab.com/verygoodsoftwarenotvirus/naff/lib/utils"
	"gitlab.com/verygoodsoftwarenotvirus/naff/models"
)

func httpRoutesTestDotGo(proj *models.Project) *jen.File {
	code := jen.NewFile(packageName)

	utils.AddImports(proj, code)

	code.Add(
		jen.Func().ID("buildRequest").Params(jen.ID("t").PointerTo().Qual("testing", "T")).Params(jen.PointerTo().Qual("net/http", "Request")).Block(
			jen.ID("t").Dot("Helper").Call(),
			jen.Line(),
			jen.List(jen.ID(constants.RequestVarName), jen.Err()).Assign().Qual("net/http", "NewRequest").Callln(
				jen.Qual("net/http", "MethodGet"),
				jen.Lit("https://verygoodsoftwarenotvirus.ru"),
				jen.Nil(),
			),
			jen.Line(),
			utils.RequireNotNil(jen.ID(constants.RequestVarName), nil),
			utils.AssertNoError(jen.Err(), nil),
			jen.Return().ID(constants.RequestVarName),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_validateCredentialChangeRequest").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTest(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Password")), jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("TOTPToken")), jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					constants.CtxVar(),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertEqual(jen.ID(utils.BuildFakeVarName("User")), jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("sc"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with no rows found in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					constants.CtxVar(),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusNotFound"), jen.ID("sc"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with error fetching from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"), jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					constants.CtxVar(),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("sc"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"), jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), constants.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					constants.CtxVar(),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("sc"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with invalid login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"), jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Password")), jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("TOTPToken")), jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					constants.CtxVar(),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("sc"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_ListHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "UserList"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUsers"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "Anything"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("UserList")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.UserList")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "ed"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error reading from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUsers"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "UserList")).Call(jen.Nil()), constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "UserList"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUsers"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "Anything"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("UserList")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.UserList")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "ed"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_CreateHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeUserCreationInputFromUser", jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("models.UserDatabaseCreationInput")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("db"),
				jen.Line(),
				jen.ID("mc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Increment"), jen.Qual(constants.MockPkg, "Anything")),
				jen.ID("s").Dot("userCounter").Equals().ID("mc"),
				jen.Line(),
				jen.ID("r").Assign().AddressOf().Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(
					jen.Lit("Report"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("newsman.Event")),
				).Dot("Return").Call(),
				jen.ID("s").Dot("reporter").Equals().ID("r"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.UserCreationResponse")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusCreated"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("auth", "db", "mc", "r", "ed"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with user creation disabled",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("userCreationEnabled").Equals().False(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusForbidden"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with missing input",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error hashing password",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeUserCreationInputFromUser", jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"), constants.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("auth"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error generating secret",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeUserCreationInputFromUser", jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("models.UserDatabaseCreationInput")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("db"),
				jen.Line(),
				jen.ID("sg").Assign().AddressOf().ID("mockSecretGenerator").Values(),
				jen.ID("sg").Dot("On").Call(jen.Lit("GenerateTwoFactorSecret")).Dot("Return").Call(jen.EmptyString(), constants.ObligatoryError()),
				jen.ID("s").Dot("secretGenerator").Equals().ID("sg"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("auth", "db", "sg"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error creating entry in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeUserCreationInputFromUser", jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("models.UserDatabaseCreationInput")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("db"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("auth", "db"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with pre-existing entry in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeUserCreationInputFromUser", jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("models.UserDatabaseCreationInput")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Qual(proj.DatabaseV1Package("client"), "ErrUserExists")),
				jen.ID("s").Dot("userDataManager").Equals().ID("db"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("auth", "db"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeUserCreationInputFromUser", jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("models.UserDatabaseCreationInput")),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("db"),
				jen.Line(),
				jen.ID("mc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Increment"), jen.Qual(constants.MockPkg, "Anything")),
				jen.ID("s").Dot("userCounter").Equals().ID("mc"),
				jen.Line(),
				jen.ID("r").Assign().AddressOf().Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(
					jen.Lit("Report"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("newsman.Event")),
				).Dot("Return").Call(),
				jen.ID("s").Dot("reporter").Equals().ID("r"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.UserCreationResponse")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusCreated"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("auth", "db", "mc", "r", "ed"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_ReadHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.Underscore().PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID(utils.BuildFakeVarName("User")).Dot("ID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "ed"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with no rows found",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.Underscore().PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID(utils.BuildFakeVarName("User")).Dot("ID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusNotFound"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error reading from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.Underscore().PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID(utils.BuildFakeVarName("User")).Dot("ID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.Underscore().PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID(utils.BuildFakeVarName("User")).Dot("ID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "ed"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_NewTOTPSecretHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeTOTPSecretRefreshInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("TOTPSecretRefreshMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.TOTPSecretRefreshResponse")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAccepted"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth", "ed"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without input attached to request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with input attached but without user information",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeTOTPSecretRefreshInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeTOTPSecretRefreshInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), constants.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error generating secret",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeTOTPSecretRefreshInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("TOTPSecretRefreshMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("sg").Assign().AddressOf().ID("mockSecretGenerator").Values(),
				jen.ID("sg").Dot("On").Call(jen.Lit("GenerateTwoFactorSecret")).Dot("Return").Call(jen.EmptyString(), constants.ObligatoryError()),
				jen.ID("s").Dot("secretGenerator").Equals().ID("sg"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth", "sg"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error updating user in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeTOTPSecretRefreshInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakeTOTPSecretRefreshInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.User")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("*models.TOTPSecretRefreshResponse")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAccepted"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth", "ed"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_TOTPSecretValidationHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn").Equals().Nil(),
				jen.ID("exampleInput").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeTOTPSecretValidationInputForUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("TOTPSecretVerificationMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUserWithUnverifiedTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("VerifyUserTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("TOTPSecretVerificationHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAccepted"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without valid input attached",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn").Equals().Nil(),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUserWithUnverifiedTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("TOTPSecretVerificationHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn").Equals().Nil(),
				jen.ID("exampleInput").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeTOTPSecretValidationInputForUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("TOTPSecretVerificationMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUserWithUnverifiedTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(
					jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Parens(jen.Nil()),
					constants.ObligatoryError(),
				),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("TOTPSecretVerificationHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with secret already validated",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("og").Assign().ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn"),
				jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn").Equals().Nil(),
				jen.ID("exampleInput").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeTOTPSecretValidationInputForUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("TOTPSecretVerificationMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn").Equals().ID("og"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUserWithUnverifiedTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("TOTPSecretVerificationHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAlreadyReported"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with invalid code",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn").Equals().Nil(),
				jen.ID("exampleInput").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeTOTPSecretValidationInputForUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.ID("exampleInput").Dot("TOTPToken").Equals().Lit("INVALID"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("TOTPSecretVerificationMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUserWithUnverifiedTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("TOTPSecretVerificationHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error verifying two factor secret",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecretVerifiedOn").Equals().Nil(),
				jen.ID("exampleInput").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeTOTPSecretValidationInputForUser").Call(jen.ID(utils.BuildFakeVarName("User"))),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("TOTPSecretVerificationMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUserWithUnverifiedTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("VerifyUserTwoFactorSecret"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("TOTPSecretVerificationHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
			jen.Line(),
		),
	)

	code.Add(
		jen.Func().ID("TestService_UpdatePasswordHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakePasswordUpdateInput"),
				jen.Line(),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUserPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("string")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("NewPassword")).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAccepted"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without input attached to request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with input but without user info",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakePasswordUpdateInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakePasswordUpdateInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUserPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("string")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), constants.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error hashing password",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakePasswordUpdateInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(
					jen.ID(utils.BuildFakeVarName("User")),
					jen.Nil(),
				),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUserPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("string")),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("NewPassword"),
				).Dot("Return").Call(jen.Lit("blah"), constants.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error updating user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVarWithCustomName(proj, "exampleInput", "BuildFakePasswordUpdateInput"),
				jen.Line(),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.ID("PasswordChangeMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID(constants.RequestVarName).Equals().ID(constants.RequestVarName).Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(
						jen.ID(constants.RequestVarName).Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "SessionInfoKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ToSessionInfo").Call(),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUserPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("string")),
				).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("NewPassword"),
				).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "auth"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_Archive").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.ID(constants.RequestVarName).PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID(utils.BuildFakeVarName("User")).Dot("ID"),
				),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("ArchiveUser"),
					jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("r").Assign().AddressOf().Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(
					jen.Lit("Report"),
					jen.Qual(constants.MockPkg, "AnythingOfType").Call(jen.Lit("newsman.Event")),
				).Dot("Return").Call(),
				jen.ID("s").Dot("reporter").Equals().ID("r"),
				jen.Line(),
				jen.ID("mc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Decrement"), jen.Qual(constants.MockPkg, "Anything")),
				jen.ID("s").Dot("userCounter").Equals().ID("mc"),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusNoContent"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB", "r", "mc"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error updating database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.ID(constants.RequestVarName).PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID(utils.BuildFakeVarName("User")).Dot("ID"),
				),
				jen.List(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("ArchiveUser"), jen.Qual(constants.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(constants.ObligatoryError()),
				jen.ID("s").Dot("userDataManager").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID(constants.ResponseVarName), jen.ID(constants.RequestVarName)),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID(constants.ResponseVarName).Dot("Code"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("mockDB"),
			),
		),
		jen.Line(),
	)

	code.Add(
		jen.Func().ID("TestService_buildQRCode").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").PointerTo().Qual("testing", "T")).Block(
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				constants.CreateCtx(),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("buildQRCode").Call(
					constants.CtxVar(),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Username"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
				),
				jen.Line(),
				utils.AssertNotEmpty(jen.ID("actual"), nil),
				utils.AssertTrue(
					jen.Qual("strings", "HasPrefix").Call(
						jen.ID("actual"),
						jen.ID("base64ImagePrefix"),
					),
					nil,
				),
			),
			),
		),
	)

	return code
}
