package audit

import (
	"net/http"
	"testing"

	mockencoding {{ projectImport "internal/encoding/mock" }}
	{{ projectImport "internal/observability/logging" }}
	{{ projectImport "internal/observability/tracing" }}
	mockrouting {{ projectImport "internal/routing/mock" }}
	mocktypes {{ projectImport "pkg/types/mock" }}

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func buildTestService() *service {
	return &service{
		logger:                 logging.NewNoopLogger(),
		auditLog:               &mocktypes.AuditLogEntryDataManager{},
		auditLogEntryIDFetcher: func(req *http.Request) uint64 { return 0 },
		encoderDecoder:         mockencoding.NewMockEncoderDecoder(),
		tracer:                 tracing.NewTracer("test"),
	}
}

func TestProvideAuditService(T *testing.T) {
	T.Parallel()

	T.Run("standard", func(t *testing.T) {
		t.Parallel()

		rpm := mockrouting.NewRouteParamManager()
		rpm.On(
			"BuildRouteParamIDFetcher",
			mock.IsType(logging.NewNoopLogger()), LogEntryURIParamKey, "audit log entry").Return(func(*http.Request) uint64 { return 0 })

		s := ProvideService(
			logging.NewNoopLogger(),
			&mocktypes.AuditLogEntryDataManager{},
			mockencoding.NewMockEncoderDecoder(),
			rpm,
		)

		assert.NotNil(t, s)

		mock.AssertExpectationsForObjects(t, rpm)
	})
}
