package auth

import (
	jen "gitlab.com/verygoodsoftwarenotvirus/naff/forks/jennifer/jen"
	utils "gitlab.com/verygoodsoftwarenotvirus/naff/lib/utils"
	"gitlab.com/verygoodsoftwarenotvirus/naff/models"
)

func httpRoutesTestDotGo(proj *models.Project) *jen.File {
	ret := jen.NewFile("auth")

	utils.AddImports(proj, ret)

	ret.Add(
		jen.Func().ID("TestService_DecodeCookieFromRequest").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/api/v1/something"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.ID("c"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.RequireNoError(jen.Err(), nil),
				jen.ID("req").Dot("AddCookie").Call(jen.ID("c")),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("DecodeCookieFromRequest").Call(jen.ID("req").Dot("Context").Call(), jen.ID("req")),
				utils.AssertNoError(jen.Err(), nil),
				utils.AssertNotNil(jen.ID("cookie"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with invalid cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/api/v1/something"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.Comment("begin building bad cookie"),
				jen.Comment("NOTE: any code here is duplicated from service.buildAuthCookie"),
				jen.Comment("any changes made there might need to be reflected here"),
				jen.ID("c").Assign().VarPointer().Qual("net/http", "Cookie").Valuesln(
					jen.ID("Name").MapAssign().ID("CookieName"),
					jen.ID("Value").MapAssign().Lit("blah blah blah this is not a real cookie"),
					jen.ID("Path").MapAssign().Lit("/"),
					jen.ID("HttpOnly").MapAssign().True(),
				),
				jen.Comment("end building bad cookie"),
				jen.ID("req").Dot("AddCookie").Call(jen.ID("c")),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("DecodeCookieFromRequest").Call(jen.ID("req").Dot("Context").Call(), jen.ID("req")),
				utils.AssertError(jen.Err(), nil),
				utils.AssertNil(jen.ID("cookie"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/api/v1/something"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("DecodeCookieFromRequest").Call(jen.ID("req").Dot("Context").Call(), jen.ID("req")),
				utils.AssertError(jen.Err(), nil),
				utils.AssertEqual(jen.Err(), jen.Qual("net/http", "ErrNoCookie"), nil),
				utils.AssertNil(jen.ID("cookie"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_WebsocketAuthFunction").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with valid oauth2 client",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "OAuth2Client"),
				jen.Line(),
				jen.ID("oacv").Assign().VarPointer().ID("mockOAuth2ClientValidator").Values(),
				jen.ID("oacv").Dot("On").Callln(
					jen.Lit("ExtractOAuth2ClientFromRequest"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.ID("exampleOAuth2Client"), jen.Nil()),
				jen.ID("s").Dot("oauth2ClientsService").Equals().ID("oacv"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("WebsocketAuthFunction").Call(jen.ID("req")),
				utils.AssertTrue(jen.ID("actual"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("oacv"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with valid cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				utils.BuildFakeVar(proj, "OAuth2Client"),
				jen.Line(),
				jen.ID("oacv").Assign().VarPointer().ID("mockOAuth2ClientValidator").Values(),
				jen.ID("oacv").Dot("On").Callln(
					jen.Lit("ExtractOAuth2ClientFromRequest"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.ID("exampleOAuth2Client"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("oauth2ClientsService").Equals().ID("oacv"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.ID("c"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.RequireNoError(jen.Err(), nil),
				jen.ID("req").Dot("AddCookie").Call(jen.ID("c")),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("WebsocketAuthFunction").Call(jen.ID("req")),
				utils.AssertTrue(jen.ID("actual"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("oacv"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with nothing",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "OAuth2Client"),
				jen.Line(),
				jen.ID("oacv").Assign().VarPointer().ID("mockOAuth2ClientValidator").Values(),
				jen.ID("oacv").Dot("On").Callln(
					jen.Lit("ExtractOAuth2ClientFromRequest"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.ID("exampleOAuth2Client"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("oauth2ClientsService").Equals().ID("oacv"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("WebsocketAuthFunction").Call(jen.ID("req")),
				utils.AssertFalse(jen.ID("actual"), nil),
				jen.Line(),
				utils.AssertExpectationsFor("oacv"),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_FetchUserFromRequest").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.ID("c"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.RequireNoError(jen.Err(), nil),
				jen.ID("req").Dot("AddCookie").Call(jen.ID("c")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("ID"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actualUser"), jen.Err()).Assign().ID("s").Dot("FetchUserFromRequest").Call(jen.ID("req").Dot("Context").Call(), jen.ID("req")),
				utils.AssertEqual(jen.ID("exampleUser"), jen.ID("actualUser"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.Line(),
				jen.List(jen.ID("actualUser"), jen.Err()).Assign().ID("s").Dot("FetchUserFromRequest").Call(jen.ID("req").Dot("Context").Call(), jen.ID("req")),
				utils.AssertNil(jen.ID("actualUser"), nil),
				utils.AssertError(jen.Err(), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.ID("c"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.RequireNoError(jen.Err(), nil),
				jen.ID("req").Dot("AddCookie").Call(jen.ID("c")),
				jen.Line(),
				jen.ID("expectedError").Assign().Qual("errors", "New").Call(jen.Lit("blah")),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("ID"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), jen.ID("expectedError")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actualUser"), jen.Err()).Assign().ID("s").Dot("FetchUserFromRequest").Call(jen.ID("req").Dot("Context").Call(), jen.ID("req")),
				utils.AssertNil(jen.ID("actualUser"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_LoginHandler").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusNoContent"), jen.ID("res").Dot("Code"), nil),
				utils.AssertNotEmpty(jen.ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching login data from request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Qual("errors", "New").Call(jen.Lit("arbitrary"))),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code"), nil),
				utils.AssertEmpty(jen.ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding error fetching login data",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("ed").Assign().VarPointer().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Callln(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Qual("errors", "New").Call(jen.Lit("arbitrary"))),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code"), nil),
				utils.AssertEmpty(jen.ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("ed", "udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with invalid login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.False(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code"), nil),
				utils.AssertEmpty(jen.ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code"), nil),
				utils.AssertEmpty(jen.ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error building cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("cb").Assign().VarPointer().ID("mockCookieEncoderDecoder").Values(),
				jen.ID("cb").Dot("On").Callln(
					jen.Lit("Encode"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.EmptyString(), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("cookieManager").Equals().ID("cb"),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
				utils.AssertEmpty(jen.ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("cb", "udb", "authr"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error building cookie and error encoding cookie response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("cb").Assign().VarPointer().ID("mockCookieEncoderDecoder").Values(),
				jen.ID("cb").Dot("On").Callln(
					jen.Lit("Encode"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.EmptyString(), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("cookieManager").Equals().ID("cb"),
				jen.Line(),
				jen.ID("ed").Assign().VarPointer().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Callln(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.Line(),
				jen.ID("s").Dot("LoginHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
				utils.AssertEmpty(jen.ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")), nil),
				jen.Line(),
				utils.AssertExpectationsFor("cb", "udb", "authr"),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_Logout").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.ID("c"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("req").Dot("AddCookie").Call(jen.ID("c")),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("LogoutHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("actualCookie").Assign().ID("res").Dot("Header").Call().Dot("Get").Call(jen.Lit("Set-Cookie")),
				utils.AssertContains(jen.ID("actualCookie"), jen.Lit("Max-Age=0"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without cookie",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.ID("s").Dot("LogoutHandler").Call().Call(jen.ID("res"), jen.ID("req")),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_fetchLoginDataFromRequest").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.List(jen.ID("loginData"), jen.Err()).Assign().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID("req")),
				jen.Line(),
				utils.RequireNotNil(jen.ID("loginData"), nil),
				utils.AssertEqual(jen.ID("loginData").Dot("user"), jen.ID("exampleUser"), nil),
				utils.AssertNil(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without login data attached to request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.List(jen.Underscore(), jen.Err()).Equals().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID("req")),
				utils.AssertError(jen.Err(), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with DB error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.List(jen.Underscore(), jen.Err()).Equals().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID("req")),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("Username"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodGet"), jen.Lit("http://todo.verygoodsoftwarenotvirus.ru/testing"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Call(jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("UserLoginInputMiddlewareCtxKey"), jen.ID("exampleLoginData"))),
				jen.List(jen.Underscore(), jen.Err()).Equals().ID("s").Dot("fetchLoginDataFromRequest").Call(jen.ID("req")),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("udb"),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_validateLogin").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTest(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.ID("exampleInput").Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(utils.CtxVar(), jen.ID("exampleInput")),
				utils.AssertTrue(jen.ID("actual"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with too weak a password hash",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.ID("exampleInput").Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Qual(proj.InternalAuthV1Package(), "ErrPasswordHashTooWeak")),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("HashPassword"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("UpdateUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(utils.CtxVar(), jen.ID("exampleInput")),
				utils.AssertTrue(jen.ID("actual"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr", "udb"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with too weak a password hash and error hashing the password",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedErr").Assign().Qual("errors", "New").Call(jen.Lit("arbitrary")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.ID("exampleInput").Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Qual(proj.InternalAuthV1Package(), "ErrPasswordHashTooWeak")),
				jen.Line(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("HashPassword"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.EmptyString(), jen.ID("expectedErr")),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(utils.CtxVar(), jen.ID("exampleInput")),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with too weak a password hash and error updating user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedErr").Assign().Qual("errors", "New").Call(jen.Lit("arbitrary")),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.ID("exampleInput").Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.True(), jen.Qual(proj.InternalAuthV1Package(), "ErrPasswordHashTooWeak")),
				jen.Line(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("HashPassword"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.ID("udb").Assign().VarPointer().Qual(proj.ModelsV1Package("mock"), "UserDataManager").Values(),
				jen.ID("udb").Dot("On").Callln(
					jen.Lit("UpdateUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.ID("expectedErr")),
				jen.ID("s").Dot("userDB").Equals().ID("udb"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(utils.CtxVar(), jen.ID("exampleInput")),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr", "udb"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedErr").Assign().Qual("errors", "New").Call(jen.Lit("arbitrary")),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.ID("exampleInput").Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.False(), jen.ID("expectedErr")),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(utils.CtxVar(), jen.ID("exampleInput")),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with invalid login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.ID("exampleLoginData").Assign().Qual(proj.FakeModelsPackage(), "BuildFakeUserLoginInputFromUser").Call(jen.ID("exampleUser")),
				jen.ID("exampleInput").Assign().ID("loginData").Valuesln(
					jen.ID("loginInput").MapAssign().ID("exampleLoginData"),
					jen.ID("user").MapAssign().ID("exampleUser"),
				),
				jen.Line(),
				jen.ID("authr").Assign().VarPointer().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("authr").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.False(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("authr"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("s").Dot("validateLogin").Call(utils.CtxVar(), jen.ID("exampleInput")),
				utils.AssertFalse(jen.ID("actual"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("authr"),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_buildCookie").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.AssertNotNil(jen.ID("cookie"), nil),
				utils.AssertNoError(jen.Err(), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.ID("cb").Assign().VarPointer().ID("mockCookieEncoderDecoder").Values(),
				jen.ID("cb").Dot("On").Callln(
					jen.Lit("Encode"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.EmptyString(), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("cookieManager").Equals().ID("cb"),
				jen.Line(),
				jen.List(jen.ID("cookie"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.AssertNil(jen.ID("cookie"), nil),
				utils.AssertError(jen.Err(), nil),
				jen.Line(),
				utils.AssertExpectationsFor("cb"),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_CycleSecret").Params(jen.ID("T").ParamPointer().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"normal operation",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				utils.BuildFakeVar(proj, "User"),
				jen.Line(),
				jen.List(jen.ID("c"), jen.Err()).Assign().ID("s").Dot("buildAuthCookie").Call(jen.ID("exampleUser")),
				utils.AssertNotNil(jen.ID("c"), nil),
				utils.AssertNoError(jen.Err(), nil),
				jen.Line(),
				jen.Var().ID("ca").Qual(proj.ModelsV1Package(), "CookieAuth"),
				jen.ID("decodeErr").Assign().ID("s").Dot("cookieManager").Dot("Decode").Call(jen.ID("CookieName"), jen.ID("c").Dot("Value"), jen.AddressOf().ID("ca")),
				utils.AssertNoError(jen.ID("decodeErr"), nil),
				jen.Line(),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Call(jen.Qual("net/http", "MethodPost"), jen.Lit("https://blah.com"), jen.Nil()),
				utils.RequireNotNil(jen.ID("req"), nil),
				utils.RequireNoError(jen.Err(), nil),
				jen.Line(),
				jen.ID("s").Dot("CycleSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("decodeErr2").Assign().ID("s").Dot("cookieManager").Dot("Decode").Call(jen.ID("CookieName"), jen.ID("c").Dot("Value"), jen.AddressOf().ID("ca")),
				utils.AssertError(jen.ID("decodeErr2"), nil),
			),
		),
		jen.Line(),
	)
	return ret
}
