package users

import (
	jen "gitlab.com/verygoodsoftwarenotvirus/naff/forks/jennifer/jen"
	utils "gitlab.com/verygoodsoftwarenotvirus/naff/lib/utils"
)

func httpRoutesTestDotGo() *jen.File {
	ret := jen.NewFile("users")

	utils.AddImports(ret)

	ret.Add(
		jen.Func().ID("buildRequest").Params(jen.ID("t").Op("*").Qual("testing", "T")).Params(jen.Op("*").Qual("net/http", "Request")).Block(
			jen.ID("t").Dot("Helper").Call(),
			jen.Line(),
			jen.List(jen.ID("req"), jen.ID("err")).Op(":=").Qual("net/http", "NewRequest").Callln(
				jen.Qual("net/http", "MethodGet"),
				jen.Lit("https://verygoodsoftwarenotvirus.ru"),
				jen.ID("nil"),
			),
			jen.Line(),
			jen.ID("require").Dot("NotNil").Call(jen.ID("t"), jen.ID("req")),
			jen.ID("assert").Dot("NoError").Call(jen.ID("t"), jen.ID("err")),
			jen.Return().ID("req"),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("Test_randString").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("obligatory"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.List(jen.ID("actual"), jen.ID("err")).Op(":=").ID("randString").Call(),
				jen.ID("assert").Dot("NotEmpty").Call(jen.ID("t"), jen.ID("actual")),
				jen.ID("assert").Dot("NoError").Call(jen.ID("t"), jen.ID("err")),
			)),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_validateCredentialChangeRequest").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.Line(),
				jen.ID("exampleTOTPToken").Op(":=").Lit("123456"),
				jen.ID("examplePassword").Op(":=").Lit("password"),
				jen.ID("req").Op(":=").ID("buildRequest").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.ID("expected"), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("expected").Dot("HashedPassword"),
					jen.ID("examplePassword"), jen.ID("expected").Dot("TwoFactorSecret"),
					jen.ID("exampleTOTPToken"), jen.ID("expected").Dot("Salt"),
				).Dot("Return").Call(jen.ID("true"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Op(":=").ID("s").Dot("validateCredentialChangeRequest").Callln(
					jen.ID("req").Dot("Context").Call(),
					jen.ID("expected").Dot("ID"),
					jen.ID("examplePassword"),
					jen.ID("exampleTOTPToken"),
				),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.ID("expected"), jen.ID("actual")),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusOK"), jen.ID("sc")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with no rows found in database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleTOTPToken").Op(":=").Lit("123456"),
				jen.ID("examplePassword").Op(":=").Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("expected").Dot("ID"),
				).Dot("Return").Call(jen.Parens(jen.Op("*").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User")).Call(jen.ID("nil")), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Op(":=").ID("s").Dot("validateCredentialChangeRequest").Callln(
					jen.Qual("context", "Background").Call(),
					jen.ID("expected").Dot("ID"),
					jen.ID("examplePassword"),
					jen.ID("exampleTOTPToken"),
				),
				jen.Line(),
				jen.ID("assert").Dot("Nil").Call(jen.ID("t"), jen.ID("actual")),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusNotFound"), jen.ID("sc")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error fetching from database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleTOTPToken").Op(":=").Lit("123456"),
				jen.ID("examplePassword").Op(":=").Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.Parens(jen.Op("*").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User")).Call(jen.ID("nil")), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Op(":=").ID("s").Dot("validateCredentialChangeRequest").Callln(
					jen.Qual("context", "Background").Call(),
					jen.ID("expected").Dot("ID"),
					jen.ID("examplePassword"),
					jen.ID("exampleTOTPToken"),
				),
				jen.Line(),
				jen.ID("assert").Dot("Nil").Call(jen.ID("t"), jen.ID("actual")),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("sc")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error validating login"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleTOTPToken").Op(":=").Lit("123456"),
				jen.ID("examplePassword").Op(":=").Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.ID("expected"), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("expected").Dot("HashedPassword"),
					jen.ID("examplePassword"),
					jen.ID("expected").Dot("TwoFactorSecret"),
					jen.ID("exampleTOTPToken"),
					jen.ID("expected").Dot("Salt"),
				).Dot("Return").Call(jen.ID("false"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Op(":=").ID("s").Dot("validateCredentialChangeRequest").Callln(
					jen.Qual("context", "Background").Call(),
					jen.ID("expected").Dot("ID"),
					jen.ID("examplePassword"),
					jen.ID("exampleTOTPToken"),
				),
				jen.Line(),
				jen.ID("assert").Dot("Nil").Call(jen.ID("t"), jen.ID("actual")),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("sc")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with invalid login"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleTOTPToken").Op(":=").Lit("123456"),
				jen.ID("examplePassword").Op(":=").Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.ID("expected"), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("expected").Dot("HashedPassword"),
					jen.ID("examplePassword"), jen.ID("expected").Dot("TwoFactorSecret"),
					jen.ID("exampleTOTPToken"), jen.ID("expected").Dot("Salt"),
				).Dot("Return").Call(jen.ID("false"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Op(":=").ID("s").Dot("validateCredentialChangeRequest").Callln(
					jen.Qual("context", "Background").Call(),
					jen.ID("expected").Dot("ID"),
					jen.ID("examplePassword"),
					jen.ID("exampleTOTPToken"),
				),
				jen.Line(),
				jen.ID("assert").Dot("Nil").Call(jen.ID("t"), jen.ID("actual")),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusUnauthorized"), jen.ID("sc")),
			)),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_List").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUsers"), jen.Qual("github.com/stretchr/testify/mock", "Anything"), jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserList").Values(), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error reading from database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUsers"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Parens(jen.Op("*").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserList")).Call(jen.ID("nil")), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error encoding response"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUsers"), jen.Qual("github.com/stretchr/testify/mock", "Anything"), jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserList").Values(), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code")),
			)),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_Create").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserInput").Valuesln(
					jen.ID("Username").Op(":").Lit("username"),
					jen.ID("Password").Op(":").Lit("password")),
				jen.ID("expectedUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("Username").Op(":").ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").Op(":").Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("db").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(jen.Lit("CreateUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"), jen.ID("exampleInput")).Dot("Return").Call(jen.ID("expectedUser"), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("db"),
				jen.Line(),
				jen.ID("mc").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/metrics/mock", "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Increment"), jen.Qual("github.com/stretchr/testify/mock", "Anything")),
				jen.ID("s").Dot("userCounter").Op("=").ID("mc"),
				jen.Line(),
				jen.ID("r").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(jen.Lit("Report"), jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(),
				jen.ID("s").Dot("reporter").Op("=").ID("r"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID("exampleInput"))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Op("=").ID("true"),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusCreated"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with user creation disabled"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("userCreationEnabled").Op("=").ID("false"),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusForbidden"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with missing input"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("userCreationEnabled").Op("=").ID("true"),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error hashing password"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserInput").Valuesln(
					jen.ID("Username").Op(":").Lit("username"),
					jen.ID("Password").Op(":").Lit("password"),
				),
				jen.ID("expectedUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("Username").Op(":").ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").Op(":").Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID("exampleInput"))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Op("=").ID("true"),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error creating entry in database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserInput").Valuesln(
					jen.ID("Username").Op(":").Lit("username"),
					jen.ID("Password").Op(":").Lit("password"),
				),
				jen.ID("expectedUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("Username").Op(":").ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").Op(":").Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("db").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput"),
				).Dot("Return").Call(jen.ID("expectedUser"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("database").Op("=").ID("db"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID("exampleInput"))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Op("=").ID("true"),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with pre-existing entry in database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserInput").Valuesln(
					jen.ID("Username").Op(":").Lit("username"),
					jen.ID("Password").Op(":").Lit("password"),
				),
				jen.ID("expectedUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("Username").Op(":").ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").Op(":").Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("db").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput"),
				).Dot("Return").Call(jen.ID("expectedUser"), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1/client", "ErrUserExists")),
				jen.ID("s").Dot("database").Op("=").ID("db"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID("exampleInput"))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Op("=").ID("true"),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error encoding response"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserInput").Valuesln(
					jen.ID("Username").Op(":").Lit("username"),
					jen.ID("Password").Op(":").Lit("password"),
				),
				jen.ID("expectedUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("Username").Op(":").ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").Op(":").Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("db").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput"),
				).Dot("Return").Call(jen.ID("expectedUser"), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("db"),
				jen.Line(),
				jen.ID("mc").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/metrics/mock", "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Increment"), jen.Qual("github.com/stretchr/testify/mock", "Anything")),
				jen.ID("s").Dot("userCounter").Op("=").ID("mc"),
				jen.Line(),
				jen.ID("r").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(jen.Lit("Report"), jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(),
				jen.ID("s").Dot("reporter").Op("=").ID("r"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID("exampleInput"))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Op("=").ID("true"),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusCreated"), jen.ID("res").Dot("Code")),
			)),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_Read").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Values(), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with no rows found"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Values(), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusNotFound"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error reading from database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Values(), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error encoding response"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Values(), jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code")),
			)),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_NewTOTPSecret").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "TOTPSecretRefreshInput").Values(),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(),
						jen.ID("TOTPSecretRefreshMiddlewareCtxKey"),
						jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(),
						jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID")).Dot("Return").Call(jen.ID("exampleUser"), jen.ID("nil")),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("true"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusAccepted"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("without input attached to request"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with input attached but without user information"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "TOTPSecretRefreshInput").Values(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error validating login"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "TOTPSecretRefreshInput").Values(),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.ID("nil")),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("false"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error updating in database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "TOTPSecretRefreshInput").Values(),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID")).Dot("Return").Call(jen.ID("exampleUser"), jen.ID("nil")),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("true"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error encoding response"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "TOTPSecretRefreshInput").Values(),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.ID("nil")),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("true"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusAccepted"), jen.ID("res").Dot("Code")),
			)),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_UpdatePassword").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").Op(":").Lit("new_password"),
					jen.ID("CurrentPassword").Op(":").Lit("old_password"),
					jen.ID("TOTPToken").Op(":").Lit("123456"),
				),
				jen.Line(),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID")).Dot("Return").Call(jen.ID("exampleUser"), jen.ID("nil")),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("true"), jen.ID("nil")),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("NewPassword")).Dot("Return").Call(jen.Lit("blah"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusAccepted"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("without input attached to request"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with input but without user info"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").Op(":").Lit("new_password"),
					jen.ID("CurrentPassword").Op(":").Lit("old_password"),
					jen.ID("TOTPToken").Op(":").Lit("123456"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error validating login"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").Op(":").Lit("new_password"),
					jen.ID("CurrentPassword").Op(":").Lit("old_password"),
					jen.ID("TOTPToken").Op(":").Lit("123456"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID")).Dot("Return").Call(jen.ID("exampleUser"), jen.ID("nil")),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("false"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error hashing password"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").Op(":").Lit("new_password"),
					jen.ID("CurrentPassword").Op(":").Lit("old_password"),
					jen.ID("TOTPToken").Op(":").Lit("123456"),
				),
				jen.Line(),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID")).Dot("Return").Call(
					jen.ID("exampleUser"),
					jen.ID("nil"),
				),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("true"), jen.ID("nil")),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("NewPassword"),
				).Dot("Return").Call(jen.Lit("blah"), jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error updating user"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("exampleUser").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "User").Valuesln(
					jen.ID("ID").Op(":").ID("uint64").Call(jen.Lit(123)),
					jen.ID("HashedPassword").Op(":").Lit("not really lol"),
					jen.ID("Salt").Op(":").Index().ID("byte").Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").Op(":").Lit("still no"),
				),
				jen.ID("exampleInput").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").Op(":").Lit("new_password"),
					jen.ID("CurrentPassword").Op(":").Lit("old_password"),
					jen.ID("TOTPToken").Op(":").Lit("123456"),
				),
				jen.Line(),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID("exampleInput"),
					),
				),
				jen.ID("req").Op("=").ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/models/v1", "UserIDKey"),
						jen.ID("exampleUser").Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("ID")).Dot("Return").Call(jen.ID("exampleUser"), jen.ID("nil")),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth/mock", "Authenticator").Values(),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("CurrentPassword"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.ID("true"), jen.ID("nil")),
				jen.Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/auth", "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("exampleInput").Dot("NewPassword"),
				).Dot("Return").Call(jen.Lit("blah"), jen.ID("nil")),
				jen.ID("s").Dot("authenticator").Op("=").ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_Archive").Params(jen.ID("T").Op("*").Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("happy path"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedUserID").Op(":=").ID("uint64").Call(jen.Lit(123)),
				jen.ID("s").Dot("userIDFetcher").Op("=").Func().Params(jen.ID("req").Op("*").Qual("net/http", "Request")).Params(jen.ID("uint64")).Block(
					jen.Return().ID("expectedUserID"),
				),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("ArchiveUser"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("expectedUserID"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("r").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(jen.Lit("Report"), jen.Qual("github.com/stretchr/testify/mock", "Anything")).Dot("Return").Call(),
				jen.Line(),
				jen.ID("mc").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/metrics/mock", "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Decrement"), jen.Qual("github.com/stretchr/testify/mock", "Anything")),
				jen.ID("s").Dot("userCounter").Op("=").ID("mc"),
				jen.Line(),
				jen.ID("ed").Op(":=").Op("&").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/internal/v1/encoding/mock", "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.Qual("github.com/stretchr/testify/mock", "Anything"),
				).Dot("Return").Call(jen.ID("nil")),
				jen.ID("s").Dot("encoderDecoder").Op("=").ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusNoContent"), jen.ID("res").Dot("Code")),
			)),
			jen.Line(),
			jen.ID("T").Dot("Run").Call(jen.Lit("with error updating database"), jen.Func().Params(jen.ID("t").Op("*").Qual("testing", "T")).Block(
				jen.ID("s").Op(":=").ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedUserID").Op(":=").ID("uint64").Call(jen.Lit(123)),
				jen.ID("s").Dot("userIDFetcher").Op("=").Func().Params(jen.ID("req").Op("*").Qual("net/http", "Request")).Params(jen.ID("uint64")).Block(
					jen.Return().ID("expectedUserID"),
				),
				jen.List(jen.ID("res"), jen.ID("req")).Op(":=").List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.Line(),
				jen.ID("mockDB").Op(":=").Qual("gitlab.com/verygoodsoftwarenotvirus/todo/database/v1", "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("ArchiveUser"), jen.Qual("github.com/stretchr/testify/mock", "Anything"),
					jen.ID("expectedUserID")).Dot("Return").Call(jen.Qual("errors", "New").Call(jen.Lit("blah"))),
				jen.ID("s").Dot("database").Op("=").ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				jen.ID("assert").Dot("Equal").Call(jen.ID("t"), jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code")),
			)),
		),
		jen.Line(),
	)
	return ret
}
