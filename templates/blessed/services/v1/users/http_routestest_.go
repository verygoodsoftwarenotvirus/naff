package users

import (
	jen "gitlab.com/verygoodsoftwarenotvirus/naff/forks/jennifer/jen"
	utils "gitlab.com/verygoodsoftwarenotvirus/naff/lib/utils"
	"gitlab.com/verygoodsoftwarenotvirus/naff/models"
)

func httpRoutesTestDotGo(proj *models.Project) *jen.File {
	ret := jen.NewFile("users")

	utils.AddImports(proj, ret)

	ret.Add(
		jen.Func().ID("buildRequest").Params(jen.ID("t").PointerTo().Qual("testing", "T")).Params(jen.PointerTo().Qual("net/http", "Request")).Block(
			jen.ID("t").Dot("Helper").Call(),
			jen.Line(),
			jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Callln(
				jen.Qual("net/http", "MethodGet"),
				jen.Lit("https://verygoodsoftwarenotvirus.ru"),
				jen.Nil(),
			),
			jen.Line(),
			utils.RequireNotNil(jen.ID("req"), nil),
			utils.AssertNoError(jen.Err(), nil),
			jen.Return().ID("req"),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("Test_randString").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"obligatory",
				jen.List(jen.ID("actual"), jen.Err()).Assign().ID("randString").Call(),
				utils.AssertNotEmpty(jen.ID("actual"), nil),
				utils.AssertNoError(jen.Err(), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_validateCredentialChangeRequest").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTest(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.ID("expected"), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("expected").Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Password")), jen.ID("expected").Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("TOTPToken")), jen.ID("expected").Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					utils.CtxVar(),
					jen.ID("expected").Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertEqual(jen.ID("expected"), jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("sc"), nil),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with no rows found in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("expected").Dot("ID"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					utils.CtxVar(),
					jen.ID("expected").Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusNotFound"), jen.ID("sc"), nil),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with error fetching from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					utils.CtxVar(),
					jen.ID("expected").Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("sc"), nil),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.ID("expected"), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("expected").Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID("expected").Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
					jen.ID("expected").Dot("Salt"),
				).Dot("Return").Call(jen.False(), utils.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					utils.CtxVar(),
					jen.ID("expected").Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("sc"), nil),
			),
			jen.Line(),
			utils.BuildSubTest(
				"with invalid login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("TOTPToken")).Assign().Lit("123456"),
				jen.ID(utils.BuildFakeVarName("Password")).Assign().Lit("password"),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"), jen.ID("expected").Dot("ID")).Dot("Return").Call(jen.ID("expected"), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("expected").Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Password")), jen.ID("expected").Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("TOTPToken")), jen.ID("expected").Dot("Salt"),
				).Dot("Return").Call(jen.False(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID("actual"), jen.ID("sc")).Assign().ID("s").Dot("validateCredentialChangeRequest").Callln(
					utils.CtxVar(),
					jen.ID("expected").Dot("ID"),
					jen.ID(utils.BuildFakeVarName("Password")),
					jen.ID(utils.BuildFakeVarName("TOTPToken")),
				),
				jen.Line(),
				utils.AssertNil(jen.ID("actual"), nil),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("sc"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_List").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUsers"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "UserList").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error reading from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUsers"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "UserList")).Call(jen.Nil()), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUsers"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "UserList").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_Create").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "UserInput").Valuesln(
					jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
					jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc())),
				jen.ID("expectedUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("Username").MapAssign().ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").MapAssign().Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(jen.Lit("CreateUser"), jen.Qual(utils.MockPkg, "Anything"), jen.ID(utils.BuildFakeVarName("Input"))).Dot("Return").Call(jen.ID("expectedUser"), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("db"),
				jen.Line(),
				jen.ID("mc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Increment"), jen.Qual(utils.MockPkg, "Anything")),
				jen.ID("s").Dot("userCounter").Equals().ID("mc"),
				jen.Line(),
				jen.ID("r").Assign().AddressOf().Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(jen.Lit("Report"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(),
				jen.ID("s").Dot("reporter").Equals().ID("r"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusCreated"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with user creation disabled",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("userCreationEnabled").Equals().False(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusForbidden"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with missing input",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error hashing password",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "UserInput").Valuesln(
					jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
					jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
				),
				jen.ID("expectedUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("Username").MapAssign().ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").MapAssign().Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), utils.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error creating entry in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "UserInput").Valuesln(
					jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
					jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
				),
				jen.ID("expectedUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("Username").MapAssign().ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").MapAssign().Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")),
				).Dot("Return").Call(jen.ID("expectedUser"), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("db"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with pre-existing entry in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "UserInput").Valuesln(
					jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
					jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
				),
				jen.ID("expectedUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("Username").MapAssign().ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").MapAssign().Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")),
				).Dot("Return").Call(jen.ID("expectedUser"), jen.Qual(proj.DatabaseV1Package("client"), "ErrUserExists")),
				jen.ID("s").Dot("database").Equals().ID("db"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "UserInput").Valuesln(
					jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
					jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
				),
				jen.ID("expectedUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("Username").MapAssign().ID("exampleInput").Dot("Username"),
					jen.ID("HashedPassword").MapAssign().Lit("blahblah"),
				),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("Password"),
				).Dot("Return").Call(jen.ID("expectedUser").Dot("HashedPassword"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("db").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("db").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("CreateUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")),
				).Dot("Return").Call(jen.ID("expectedUser"), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("db"),
				jen.Line(),
				jen.ID("mc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Increment"), jen.Qual(utils.MockPkg, "Anything")),
				jen.ID("s").Dot("userCounter").Equals().ID("mc"),
				jen.Line(),
				jen.ID("r").Assign().AddressOf().Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(jen.Lit("Report"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(),
				jen.ID("s").Dot("reporter").Equals().ID("r"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("UserCreationMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")))),
				jen.Line(),
				jen.ID("s").Dot("userCreationEnabled").Equals().True(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusCreated"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_Read").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "User").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with no rows found",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "User").Values(), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusNotFound"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error reading from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "User").Values(), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "User").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_NewTOTPSecret").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "TOTPSecretRefreshInput").Values(),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(),
						jen.ID("TOTPSecretRefreshMiddlewareCtxKey"),
						jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(),
						jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAccepted"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without input attached to request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with input attached but without user information",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "TOTPSecretRefreshInput").Values(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "TOTPSecretRefreshInput").Values(),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), utils.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error updating in database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "TOTPSecretRefreshInput").Values(),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "TOTPSecretRefreshInput").Values(),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("TOTPSecretRefreshMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("GetUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
				).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("NewTOTPSecretHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAccepted"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_UpdatePassword").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").MapAssign().Lit("new_password"),
					jen.ID("CurrentPassword").MapAssign().Lit("old_password"),
					jen.ID("TOTPToken").MapAssign().Lit("123456"),
				),
				jen.Line(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("NewPassword")).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusAccepted"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without input attached to request",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with input but without user info",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").MapAssign().Lit("new_password"),
					jen.ID("CurrentPassword").MapAssign().Lit("old_password"),
					jen.ID("TOTPToken").MapAssign().Lit("123456"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error validating login",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").MapAssign().Lit("new_password"),
					jen.ID("CurrentPassword").MapAssign().Lit("old_password"),
					jen.ID("TOTPToken").MapAssign().Lit("123456"),
				),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("UpdateUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.False(), utils.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error hashing password",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").MapAssign().Lit("new_password"),
					jen.ID("CurrentPassword").MapAssign().Lit("old_password"),
					jen.ID("TOTPToken").MapAssign().Lit("123456"),
				),
				jen.Line(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(
					jen.ID(utils.BuildFakeVarName("User")),
					jen.Nil(),
				),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("NewPassword"),
				).Dot("Return").Call(jen.Lit("blah"), utils.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error updating user",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.ID(utils.BuildFakeVarName("User")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("not really lol"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit("nah")),
					jen.ID("TwoFactorSecret").MapAssign().Lit("still no"),
				),
				jen.ID(utils.BuildFakeVarName("Input")).Assign().AddressOf().Qual(proj.ModelsV1Package(), "PasswordUpdateInput").Valuesln(
					jen.ID("NewPassword").MapAssign().Lit("new_password"),
					jen.ID("CurrentPassword").MapAssign().Lit("old_password"),
					jen.ID("TOTPToken").MapAssign().Lit("123456"),
				),
				jen.Line(),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.ID("PasswordChangeMiddlewareCtxKey"), jen.ID(utils.BuildFakeVarName("Input")),
					),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Callln(
						jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"),
						jen.ID(utils.BuildFakeVarName("User")).Dot("ID"),
					),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("GetUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("ID")).Dot("Return").Call(jen.ID(utils.BuildFakeVarName("User")), jen.Nil()),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("UpdateUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("auth").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.Qual(proj.InternalAuthV1Package(), "On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("HashedPassword"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("CurrentPassword"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("TwoFactorSecret"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("TOTPToken"),
					jen.ID(utils.BuildFakeVarName("User")).Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.Qual(proj.InternalAuthV1Package(), "On").Call(
					jen.Lit("HashPassword"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID(utils.BuildFakeVarName("Input")).Dot("NewPassword"),
				).Dot("Return").Call(jen.Lit("blah"), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("auth"),
				jen.Line(),
				jen.ID("s").Dot("UpdatePasswordHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_Archive").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedUserID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("expectedUserID"),
				),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(
					jen.Lit("ArchiveUser"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("expectedUserID"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("r").Assign().AddressOf().Qual("gitlab.com/verygoodsoftwarenotvirus/newsman/mock", "Reporter").Values(),
				jen.ID("r").Dot("On").Call(jen.Lit("Report"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(),
				jen.Line(),
				jen.ID("mc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("mc").Dot("On").Call(jen.Lit("Decrement"), jen.Qual(utils.MockPkg, "Anything")),
				jen.ID("s").Dot("userCounter").Equals().ID("mc"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(
					jen.Lit("EncodeResponse"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusNoContent"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error updating database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expectedUserID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("s").Dot("userIDFetcher").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("expectedUserID"),
				),
				jen.List(jen.ID("res"), jen.ID("req")).Assign().List(jen.ID("httptest").Dot("NewRecorder").Call(), jen.ID("buildRequest").Call(jen.ID("t"))),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Call(jen.Lit("ArchiveUser"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("expectedUserID")).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				jen.Line(),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)
	return ret
}
