package oauth2clients

import (
	jen "gitlab.com/verygoodsoftwarenotvirus/naff/forks/jennifer/jen"
	utils "gitlab.com/verygoodsoftwarenotvirus/naff/lib/utils"
	"gitlab.com/verygoodsoftwarenotvirus/naff/models"
)

func httpRoutesTestDotGo(proj *models.Project) *jen.File {
	ret := jen.NewFile("oauth2clients")

	utils.AddImports(proj, ret)

	ret.Add(
		jen.Func().ID("Test_randString").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("actual").Assign().ID("randString").Call(),
				utils.AssertNotEmpty(jen.ID("actual"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("buildRequest").Params(jen.ID("t").PointerTo().Qual("testing", "T")).Params(jen.PointerTo().Qual("net/http", "Request")).Block(
			jen.ID("t").Dot("Helper").Call(),
			jen.Line(),
			jen.List(jen.ID("req"), jen.Err()).Assign().Qual("net/http", "NewRequest").Callln(
				jen.Qual("net/http", "MethodGet"),
				jen.Lit("https://verygoodsoftwarenotvirus.ru"),
				jen.Nil(),
			),
			jen.Line(),
			utils.RequireNotNil(jen.ID("req"), nil),
			utils.AssertNoError(jen.Err(), nil),
			jen.Return().ID("req"),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("Test_fetchUserID").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("expected").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.Comment("for the service.fetchUserID() call"),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("expected")),
				),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("fetchUserID").Call(jen.ID("req")),
				utils.AssertEqual(jen.ID("expected"), jen.ID("actual"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"without context value present",
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("expected").Assign().Uint64().Call(jen.Zero()),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("actual").Assign().ID("s").Dot("fetchUserID").Call(jen.ID("req")),
				utils.AssertEqual(jen.ID("expected"), jen.ID("actual"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_ListHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Clients"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("userID"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientList").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.Comment("for the service.fetchUserID() call"),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with no rows returned",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Clients"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("userID"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "OAuth2ClientList")).Call(jen.Nil()), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Clients"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("userID"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "OAuth2ClientList")).Call(jen.Nil()), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Clients"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("userID"),
					jen.Qual(utils.MockPkg, "Anything"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientList").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ListHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_CreateHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("exampleUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("hashed_pass"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit(`blah`)),
					jen.ID("TwoFactorSecret").MapAssign().Lit("SUPER SECRET"),
				),
				jen.Line(),
				jen.ID("exampleInput").Assign().AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientCreationInput").Valuesln(
					jen.ID("UserLoginInput").MapAssign().Qual(proj.ModelsV1Package(), "UserLoginInput").Valuesln(
						jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
						jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
						jen.ID("TOTPToken").MapAssign().Lit("123456"),
					),
				),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Callln(
					jen.Lit("GetUserByUsername"), jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput").Dot("Username")).Dot("Return").Call(jen.ID("exampleUser"),
					jen.Nil(),
				),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("CreateOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2Client").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("a").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("a").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("Password"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("a"),
				jen.Line(),
				jen.ID("uc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("uc").Dot("On").Call(jen.Lit("Increment"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(),
				jen.ID("s").Dot("oauth2ClientCounter").Equals().ID("uc"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("CreationMiddlewareCtxKey"), jen.ID("exampleInput")),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("exampleUser").Dot("ID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusCreated"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with missing input",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusBadRequest"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error getting user",
				jen.ID("exampleUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("hashed_pass"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit(`blah`)),
					jen.ID("TwoFactorSecret").MapAssign().Lit("SUPER SECRET"),
				),
				jen.Line(),
				jen.ID("exampleInput").Assign().AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientCreationInput").Valuesln(
					jen.ID("UserLoginInput").MapAssign().Qual(proj.ModelsV1Package(), "UserLoginInput").Valuesln(
						jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
						jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
						jen.ID("TOTPToken").MapAssign().Lit("123456")),
				),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput").Dot("Username"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "User")).Call(jen.Nil()), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("CreationMiddlewareCtxKey"), jen.ID("exampleInput")),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("exampleUser").Dot("ID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with invalid credentials",
				jen.ID("exampleUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("hashed_pass"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit(`blah`)),
					jen.ID("TwoFactorSecret").MapAssign().Lit("SUPER SECRET"),
				),
				jen.Line(),
				jen.ID("exampleInput").Assign().AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientCreationInput").Valuesln(
					jen.ID("UserLoginInput").MapAssign().Qual(proj.ModelsV1Package(), "UserLoginInput").Valuesln(
						jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
						jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
						jen.ID("TOTPToken").MapAssign().Lit("123456")),
				),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("CreateOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput")).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2Client").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("a").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("a").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("Password"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.False(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("a"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("CreationMiddlewareCtxKey"), jen.ID("exampleInput")),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("exampleUser").Dot("ID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusUnauthorized"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error validating password",
				jen.ID("exampleUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("hashed_pass"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit(`blah`)),
					jen.ID("TwoFactorSecret").MapAssign().Lit("SUPER SECRET"),
				),
				jen.Line(),
				jen.ID("exampleInput").Assign().AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientCreationInput").Valuesln(
					jen.ID("UserLoginInput").MapAssign().Qual(proj.ModelsV1Package(), "UserLoginInput").Valuesln(
						jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
						jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
						jen.ID("TOTPToken").MapAssign().Lit("123456"),
					),
				),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("CreateOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2Client").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("a").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("a").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("Password"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.True(), utils.ObligatoryError()),
				jen.ID("s").Dot("authenticator").Equals().ID("a"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("CreationMiddlewareCtxKey"), jen.ID("exampleInput")),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("exampleUser").Dot("ID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error creating oauth2 client",
				jen.ID("exampleUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("hashed_pass"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit(`blah`)),
					jen.ID("TwoFactorSecret").MapAssign().Lit("SUPER SECRET"),
				),
				jen.Line(),
				jen.ID("exampleInput").Assign().AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientCreationInput").Valuesln(
					jen.ID("UserLoginInput").MapAssign().Qual(proj.ModelsV1Package(), "UserLoginInput").Valuesln(
						jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
						jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
						jen.ID("TOTPToken").MapAssign().Lit("123456"),
					),
				),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("CreateOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "OAuth2Client")).Call(jen.Nil()), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("a").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("a").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("Password"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("a"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("CreationMiddlewareCtxKey"), jen.ID("exampleInput")),
				),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("exampleUser").Dot("ID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("exampleUser").Assign().AddressOf().Qual(proj.ModelsV1Package(), "User").Valuesln(
					jen.ID("ID").MapAssign().Add(utils.FakeUint64Func()),
					jen.ID("HashedPassword").MapAssign().Lit("hashed_pass"),
					jen.ID("Salt").MapAssign().Index().Byte().Call(jen.Lit(`blah`)),
					jen.ID("TwoFactorSecret").MapAssign().Lit("SUPER SECRET"),
				),
				jen.Line(),
				jen.ID("exampleInput").Assign().AddressOf().Qual(proj.ModelsV1Package(), "OAuth2ClientCreationInput").Valuesln(
					jen.ID("UserLoginInput").MapAssign().Qual(proj.ModelsV1Package(), "UserLoginInput").Valuesln(
						jen.ID("Username").MapAssign().Add(utils.FakeUsernameFunc()),
						jen.ID("Password").MapAssign().Add(utils.FakePasswordFunc()),
						jen.ID("TOTPToken").MapAssign().Lit("123456"),
					),
				),
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("UserDataManager").Dot("On").Callln(
					jen.Lit("GetUserByUsername"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput").Dot("Username"),
				).Dot("Return").Call(jen.ID("exampleUser"), jen.Nil()),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("CreateOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleInput"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2Client").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("a").Assign().AddressOf().Qual(proj.InternalAuthV1Package("mock"), "Authenticator").Values(),
				jen.ID("a").Dot("On").Callln(
					jen.Lit("ValidateLogin"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleUser").Dot("HashedPassword"),
					jen.ID("exampleInput").Dot("Password"),
					jen.ID("exampleUser").Dot("TwoFactorSecret"),
					jen.ID("exampleInput").Dot("TOTPToken"),
					jen.ID("exampleUser").Dot("Salt"),
				).Dot("Return").Call(jen.True(), jen.Nil()),
				jen.ID("s").Dot("authenticator").Equals().ID("a"),
				jen.Line(),
				jen.ID("uc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("uc").Dot("On").Call(jen.Lit("Increment"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(),
				jen.ID("s").Dot("oauth2ClientCounter").Equals().ID("uc"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.ID("CreationMiddlewareCtxKey"), jen.ID("exampleInput"))),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("exampleUser").Dot("ID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("CreateHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusCreated"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_ReadHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("exampleOAuth2ClientID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("s").Dot("urlClientIDExtractor").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("exampleOAuth2ClientID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleOAuth2ClientID"),
					jen.ID("userID"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2Client").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with no rows found",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("exampleOAuth2ClientID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("s").Dot("urlClientIDExtractor").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("exampleOAuth2ClientID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleOAuth2ClientID"),
					jen.ID("userID"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2Client").Values(), jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusNotFound"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error fetching client from database",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("exampleOAuth2ClientID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("s").Dot("urlClientIDExtractor").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("exampleOAuth2ClientID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleOAuth2ClientID"),
					jen.ID("userID"),
				).Dot("Return").Call(jen.Parens(jen.PointerTo().Qual(proj.ModelsV1Package(), "OAuth2Client")).Call(jen.Nil()), utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error encoding response",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("exampleOAuth2ClientID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("s").Dot("urlClientIDExtractor").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("exampleOAuth2ClientID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("GetOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleOAuth2ClientID"),
					jen.ID("userID"),
				).Dot("Return").Call(jen.AddressOf().Qual(proj.ModelsV1Package(), "OAuth2Client").Values(), jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"),
					jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ReadHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusOK"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)

	ret.Add(
		jen.Func().ID("TestService_ArchiveHandler").Params(jen.ID("T").PointerTo().Qual("testing", "T")).Block(
			jen.ID("T").Dot("Parallel").Call(),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"happy path",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("exampleOAuth2ClientID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("s").Dot("urlClientIDExtractor").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("exampleOAuth2ClientID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("ArchiveOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleOAuth2ClientID"),
					jen.ID("userID"),
				).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("ed").Assign().AddressOf().Qual(proj.InternalEncodingV1Package("mock"), "EncoderDecoder").Values(),
				jen.ID("ed").Dot("On").Call(jen.Lit("EncodeResponse"), jen.Qual(utils.MockPkg, "Anything"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(jen.Nil()),
				jen.ID("s").Dot("encoderDecoder").Equals().ID("ed"),
				jen.Line(),
				jen.ID("uc").Assign().AddressOf().Qual(proj.InternalMetricsV1Package("mock"), "UnitCounter").Values(),
				jen.ID("uc").Dot("On").Call(jen.Lit("Decrement"), jen.Qual(utils.MockPkg, "Anything")).Dot("Return").Call(),
				jen.ID("s").Dot("oauth2ClientCounter").Equals().ID("uc"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusNoContent"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with no rows found",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("exampleOAuth2ClientID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("s").Dot("urlClientIDExtractor").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("exampleOAuth2ClientID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("ArchiveOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleOAuth2ClientID"),
					jen.ID("userID"),
				).Dot("Return").Call(jen.Qual("database/sql", "ErrNoRows")),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusNotFound"), jen.ID("res").Dot("Code"), nil),
			),
			jen.Line(),
			utils.BuildSubTestWithoutContext(
				"with error deleting record",
				jen.ID("s").Assign().ID("buildTestService").Call(jen.ID("t")),
				jen.ID("userID").Assign().Add(utils.FakeUint64Func()),
				jen.ID("exampleOAuth2ClientID").Assign().Add(utils.FakeUint64Func()),
				jen.Line(),
				jen.ID("s").Dot("urlClientIDExtractor").Equals().Func().Params(jen.ID("req").PointerTo().Qual("net/http", "Request")).Params(jen.Uint64()).Block(
					jen.Return().ID("exampleOAuth2ClientID"),
				),
				jen.Line(),
				jen.ID("mockDB").Assign().Qual(proj.DatabaseV1Package(), "BuildMockDatabase").Call(),
				jen.ID("mockDB").Dot("OAuth2ClientDataManager").Dot("On").Callln(
					jen.Lit("ArchiveOAuth2Client"),
					jen.Qual(utils.MockPkg, "Anything"),
					jen.ID("exampleOAuth2ClientID"),
					jen.ID("userID"),
				).Dot("Return").Call(utils.ObligatoryError()),
				jen.ID("s").Dot("database").Equals().ID("mockDB"),
				jen.Line(),
				jen.ID("req").Assign().ID("buildRequest").Call(jen.ID("t")),
				jen.ID("req").Equals().ID("req").Dot("WithContext").Callln(
					jen.Qual("context", "WithValue").Call(jen.ID("req").Dot("Context").Call(), jen.Qual(proj.ModelsV1Package(), "UserIDKey"), jen.ID("userID")),
				),
				jen.ID("res").Assign().ID("httptest").Dot("NewRecorder").Call(),
				jen.Line(),
				jen.ID("s").Dot("ArchiveHandler").Call().Call(jen.ID("res"), jen.ID("req")),
				utils.AssertEqual(jen.Qual("net/http", "StatusInternalServerError"), jen.ID("res").Dot("Code"), nil),
			),
		),
		jen.Line(),
	)
	return ret
}
