// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package server

import (
	"context"

	"{{ projectImport "internal/authentication" }}"
	"{{ projectImport "internal/capitalism/stripe" }}"
	"{{ projectImport "internal/config" }}"
	"{{ projectImport "internal/database" }}"
	config2 "{{ projectImport "internal/database/config" }}"
	"{{ projectImport "internal/encoding" }}"
	"{{ projectImport "internal/observability/logging" }}"
	"{{ projectImport "internal/observability/metrics" }}"
	"{{ projectImport "internal/routing/chi" }}"
	"{{ projectImport "internal/search/bleve" }}"
	"{{ projectImport "internal/server" }}"
	"{{ projectImport "internal/services/accounts" }}"
	"{{ projectImport "internal/services/admin" }}"
	"{{ projectImport "internal/services/apiclients" }}"
	"{{ projectImport "internal/services/audit" }}"
	authentication2 "{{ projectImport "internal/services/authentication" }}"
	"{{ projectImport "internal/services/frontend" }}"
	"{{ projectImport "internal/services/items" }}"
	"{{ projectImport "internal/services/users" }}"
	"{{ projectImport "internal/services/webhooks" }}"
	"{{ projectImport "internal/storage" }}"
	"{{ projectImport "internal/uploads" }}"
	"{{ projectImport "internal/uploads/images" }}"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.InstanceConfig, logger logging.Logger) (*server.HTTPServer, error) {
	serverConfig := cfg.Server
	observabilityConfig := &cfg.Observability
	metricsConfig := &observabilityConfig.Metrics
	instrumentationHandler, err := metrics.ProvideMetricsInstrumentationHandlerForServer(metricsConfig, logger)
	if err != nil {
		return nil, err
	}
	servicesConfigurations := &cfg.Services
	authenticationConfig := &servicesConfigurations.Auth
	authenticator := authentication.ProvideArgon2Authenticator(logger)
	configConfig := &cfg.Database
	db, err := config2.ProvideDatabaseConnection(logger, configConfig)
	if err != nil {
		return nil, err
	}
	dataManager, err := config.ProvideDatabaseClient(ctx, logger, db, cfg)
	if err != nil {
		return nil, err
	}
	userDataManager := database.ProvideUserDataManager(dataManager)
	authAuditManager := database.ProvideAuthAuditManager(dataManager)
	apiClientDataManager := database.ProvideAPIClientDataManager(dataManager)
	accountUserMembershipDataManager := database.ProvideAccountUserMembershipDataManager(dataManager)
	cookieConfig := authenticationConfig.Cookies
	config3 := cfg.Database
	sessionManager, err := config2.ProvideSessionManager(cookieConfig, config3, db)
	if err != nil {
		return nil, err
	}
	encodingConfig := cfg.Encoding
	contentType := encoding.ProvideContentType(encodingConfig)
	serverEncoderDecoder := encoding.ProvideServerEncoderDecoder(logger, contentType)
	routeParamManager := chi.NewRouteParamManager()
	authService, err := authentication2.ProvideService(logger, authenticationConfig, authenticator, userDataManager, authAuditManager, apiClientDataManager, accountUserMembershipDataManager, sessionManager, serverEncoderDecoder, routeParamManager)
	if err != nil {
		return nil, err
	}
	auditLogEntryDataManager := database.ProvideAuditLogEntryDataManager(dataManager)
	auditLogEntryDataService := audit.ProvideService(logger, auditLogEntryDataManager, serverEncoderDecoder, routeParamManager)
	accountDataManager := database.ProvideAccountDataManager(dataManager)
	unitCounterProvider, err := metrics.ProvideUnitCounterProvider(metricsConfig, logger)
	if err != nil {
		return nil, err
	}
	imageUploadProcessor := images.NewImageUploadProcessor(logger)
	uploadsConfig := &cfg.Uploads
	storageConfig := &uploadsConfig.Storage
	uploader, err := storage.NewUploadManager(ctx, logger, storageConfig, routeParamManager)
	if err != nil {
		return nil, err
	}
	uploadManager := uploads.ProvideUploadManager(uploader)
	userDataService := users.ProvideUsersService(authenticationConfig, logger, userDataManager, accountDataManager, authenticator, serverEncoderDecoder, unitCounterProvider, imageUploadProcessor, uploadManager, routeParamManager)
	accountDataService := accounts.ProvideService(logger, accountDataManager, accountUserMembershipDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	apiclientsConfig := apiclients.ProvideConfig(authenticationConfig)
	apiClientDataService := apiclients.ProvideAPIClientsService(logger, apiClientDataManager, userDataManager, authenticator, serverEncoderDecoder, unitCounterProvider, routeParamManager, apiclientsConfig)
	itemsConfig := servicesConfigurations.Items
	itemDataManager := database.ProvideItemDataManager(dataManager)
	indexManagerProvider := bleve.ProvideBleveIndexManagerProvider()
	itemDataService, err := items.ProvideService(logger, itemsConfig, itemDataManager, serverEncoderDecoder, unitCounterProvider, indexManagerProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	webhookDataManager := database.ProvideWebhookDataManager(dataManager)
	webhookDataService := webhooks.ProvideWebhooksService(logger, webhookDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	adminUserDataManager := database.ProvideAdminUserDataManager(dataManager)
	adminAuditManager := database.ProvideAdminAuditManager(dataManager)
	adminService := admin.ProvideService(logger, authenticationConfig, authenticator, adminUserDataManager, adminAuditManager, sessionManager, serverEncoderDecoder, routeParamManager)
	frontendConfig := &servicesConfigurations.Frontend
	frontendAuthService := frontend.ProvideAuthService(authService)
	usersService := frontend.ProvideUsersService(userDataService)
	capitalismConfig := &cfg.Capitalism
	stripeConfig := capitalismConfig.Stripe
	paymentManager := stripe.ProvideStripePaymentManager(logger, stripeConfig)
	service := frontend.ProvideService(frontendConfig, logger, frontendAuthService, usersService, dataManager, routeParamManager, paymentManager)
	router := chi.NewRouter(logger)
	httpServer, err := server.ProvideHTTPServer(ctx, serverConfig, instrumentationHandler, authService, auditLogEntryDataService, userDataService, accountDataService, apiClientDataService, itemDataService, webhookDataService, adminService, service, logger, serverEncoderDecoder, router)
	if err != nil {
		return nil, err
	}
	return httpServer, nil
}
