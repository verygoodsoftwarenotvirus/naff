package mock

import (
	"context"

	"{{ .OutputRepository }}/models/v1"

	"github.com/stretchr/testify/mock"
)

var _ models.{{ .Name }}DataManager = (*{{ .Name }}DataManager)(nil)

// {{ .Name }}DataManager is a mock {{ camelCase .Name }} handler
type {{ .Name }}DataManager struct {
	mock.Mock
}

// Get{{ .Name }} is a mock function
func (m *{{ .Name }}DataManager) Get{{ .Name }}(ctx context.Context, {{ camelCase .Name }}ID, userID uint64) (*models.{{ .Name }}, error) {
	args := m.Called(ctx, {{ camelCase .Name }}ID, userID)
	return args.Get(0).(*models.{{ .Name }}), args.Error(1)
}

// Get{{ .Name }}Count is a mock function
func (m *{{ .Name }}DataManager) Get{{ .Name }}Count(ctx context.Context, filter *models.QueryFilter, userID uint64) (uint64, error) {
	args := m.Called(ctx, filter, userID)
	return args.Get(0).(uint64), args.Error(1)
}

// GetAll{{ .Name }}sCount is a mock function
func (m *{{ .Name }}DataManager) GetAll{{ .Name }}sCount(ctx context.Context) (uint64, error) {
	args := m.Called(ctx)
	return args.Get(0).(uint64), args.Error(1)
}

// Get{{ .Name }}s is a mock function
func (m *{{ .Name }}DataManager) Get{{ .Name }}s(ctx context.Context, filter *models.QueryFilter, userID uint64) (*models.{{ .Name }}List, error) {
	args := m.Called(ctx, filter, userID)
	return args.Get(0).(*models.{{ .Name }}List), args.Error(1)
}

// GetAll{{ .Name }}sForUser is a mock function
func (m *{{ .Name }}DataManager) GetAll{{ .Name }}sForUser(ctx context.Context, userID uint64) ([]models.{{ .Name }}, error) {
	args := m.Called(ctx, userID)
	return args.Get(0).([]models.{{ .Name }}), args.Error(1)
}

// Create{{ .Name }} is a mock function
func (m *{{ .Name }}DataManager) Create{{ .Name }}(ctx context.Context, input *models.{{ .Name }}CreationInput) (*models.{{ .Name }}, error) {
	args := m.Called(ctx, input)
	return args.Get(0).(*models.{{ .Name }}), args.Error(1)
}

// Update{{ .Name }} is a mock function
func (m *{{ .Name }}DataManager) Update{{ .Name }}(ctx context.Context, updated *models.{{ .Name }}) error {
	return m.Called(ctx, updated).Error(0)
}

// Archive{{ .Name }} is a mock function
func (m *{{ .Name }}DataManager) Archive{{ .Name }}(ctx context.Context, id, userID uint64) error {
	return m.Called(ctx, id, userID).Error(0)
}
