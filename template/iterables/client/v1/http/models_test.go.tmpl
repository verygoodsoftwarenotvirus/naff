package client

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"strconv"
	"strings"
	"testing"

	"{{ .OutputRepository }}/models/v1"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestV1Client_BuildGet{{ .Name }}Request(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedMethod := http.MethodGet
		ctx := context.Background()

		ts := httptest.NewTLSServer(nil)
		c := buildTestClient(t, ts)
		expectedID := uint64(1)

		actual, err := c.BuildGet{{ .Name }}Request(ctx, expectedID)

		require.NotNil(t, actual)
		assert.NoError(t, err, "no error should be returned")
		assert.True(t, strings.HasSuffix(actual.URL.String(), fmt.Sprintf("%d", expectedID)))
		assert.Equal(t,
			actual.Method,
			expectedMethod,
			"request should be a %s request",
			expectedMethod,
		)
	})
}

func TestV1Client_Get{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expected := &models.{{ .Name }}{
			ID:      1,
			
			
		}

		ctx := context.Background()

		ts := httptest.NewTLSServer(
			http.HandlerFunc(
				func(res http.ResponseWriter, req *http.Request) {
					assert.True(t,
						strings.HasSuffix(
							req.URL.String(),
							strconv.Itoa(int(expected.ID)),
						),
					)
					assert.Equal(t, req.URL.Path, fmt.Sprintf("/api/v1/{{ camelCase .Name }}s/%d", expected.ID), "expected and actual path don't match")
					assert.Equal(t, req.Method, http.MethodGet)
					require.NoError(t, json.NewEncoder(res).Encode(expected))
				},
			),
		)

		c := buildTestClient(t, ts)

		actual, err := c.Get{{ .Name }}(ctx, expected.ID)

		require.NotNil(t, actual)
		assert.NoError(t, err, "no error should be returned")
		assert.Equal(t, expected, actual)
	})
}

func TestV1Client_BuildGet{{ .Name }}sRequest(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedMethod := http.MethodGet
		ctx := context.Background()

		ts := httptest.NewTLSServer(nil)

		c := buildTestClient(t, ts)
		actual, err := c.BuildGet{{ .Name }}sRequest(ctx, nil)

		require.NotNil(t, actual)
		assert.NoError(t, err, "no error should be returned")
		assert.Equal(t,
			actual.Method,
			expectedMethod,
			"request should be a %s request",
			expectedMethod,
		)
	})
}

func TestV1Client_Get{{ .Name }}s(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expected := &models.{{ .Name }}List{
			{{ .Name }}s: []models.{{ .Name }}{
				{
					ID:      1,
					
					
				},
			},
		}

		ctx := context.Background()

		ts := httptest.NewTLSServer(
			http.HandlerFunc(
				func(res http.ResponseWriter, req *http.Request) {
					assert.Equal(t, req.URL.Path, "/api/v1/{{ camelCase .Name }}s", "expected and actual path don't match")
					assert.Equal(t, req.Method, http.MethodGet)
					require.NoError(t, json.NewEncoder(res).Encode(expected))
				},
			),
		)

		c := buildTestClient(t, ts)

		actual, err := c.Get{{ .Name }}s(ctx, nil)

		require.NotNil(t, actual)
		assert.NoError(t, err, "no error should be returned")
		assert.Equal(t, expected, actual)
	})
}

func TestV1Client_BuildCreate{{ .Name }}Request(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedMethod := http.MethodPost
		ctx := context.Background()

		ts := httptest.NewTLSServer(nil)

		exampleInput := &models.{{ .Name }}CreationInput{
			
			
		}
		c := buildTestClient(t, ts)
		actual, err := c.BuildCreate{{ .Name }}Request(ctx, exampleInput)

		require.NotNil(t, actual)
		assert.NoError(t, err, "no error should be returned")
		assert.Equal(t,
			actual.Method,
			expectedMethod,
			"request should be a %s request",
			expectedMethod,
		)
	})
}

func TestV1Client_Create{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expected := &models.{{ .Name }}{
			ID:      1,
			
			
		}

		exampleInput := &models.{{ .Name }}CreationInput{
			
			
		}

		ctx := context.Background()

		ts := httptest.NewTLSServer(
			http.HandlerFunc(
				func(res http.ResponseWriter, req *http.Request) {
					assert.Equal(t, req.URL.Path, "/api/v1/{{ camelCase .Name }}s", "expected and actual path don't match")
					assert.Equal(t, req.Method, http.MethodPost)

					var x *models.{{ .Name }}CreationInput
					require.NoError(t, json.NewDecoder(req.Body).Decode(&x))
					assert.Equal(t, exampleInput, x)

					require.NoError(t, json.NewEncoder(res).Encode(expected))
					res.WriteHeader(http.StatusOK)
				},
			),
		)

		c := buildTestClient(t, ts)

		actual, err := c.Create{{ .Name }}(ctx, exampleInput)

		require.NotNil(t, actual)
		assert.NoError(t, err, "no error should be returned")
		assert.Equal(t, expected, actual)
	})
}

func TestV1Client_BuildUpdate{{ .Name }}Request(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedMethod := http.MethodPut
		ctx := context.Background()

		exampleInput := &models.{{ .Name }}{
			
			
		}

		ts := httptest.NewTLSServer(nil)
		c := buildTestClient(t, ts)
		actual, err := c.BuildUpdate{{ .Name }}Request(ctx, exampleInput)

		require.NotNil(t, actual)
		assert.NoError(t, err, "no error should be returned")
		assert.Equal(t,
			actual.Method,
			expectedMethod,
			"request should be a %s request",
			expectedMethod,
		)
	})
}

func TestV1Client_Update{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expected := &models.{{ .Name }}{
			ID:      1,
			
			
		}
		ctx := context.Background()

		ts := httptest.NewTLSServer(
			http.HandlerFunc(
				func(res http.ResponseWriter, req *http.Request) {
					assert.Equal(t, req.URL.Path, fmt.Sprintf("/api/v1/{{ camelCase .Name }}s/%d", expected.ID), "expected and actual path don't match")
					assert.Equal(t, req.Method, http.MethodPut)

					res.WriteHeader(http.StatusOK)
				},
			),
		)

		err := buildTestClient(t, ts).Update{{ .Name }}(ctx, expected)

		assert.NoError(t, err, "no error should be returned")
	})
}

func TestV1Client_BuildArchive{{ .Name }}Request(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedMethod := http.MethodDelete
		ctx := context.Background()

		ts := httptest.NewTLSServer(nil)

		expectedID := uint64(1)
		c := buildTestClient(t, ts)
		actual, err := c.BuildArchive{{ .Name }}Request(ctx, expectedID)

		require.NotNil(t, actual)
		require.NotNil(t, actual.URL)
		assert.True(t, strings.HasSuffix(actual.URL.String(), fmt.Sprintf("%d", expectedID)))
		assert.NoError(t, err, "no error should be returned")
		assert.Equal(t,
			actual.Method,
			expectedMethod,
			"request should be a %s request",
			expectedMethod,
		)
	})
}

func TestV1Client_Archive{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expected := uint64(1)
		ctx := context.Background()

		ts := httptest.NewTLSServer(
			http.HandlerFunc(
				func(res http.ResponseWriter, req *http.Request) {
					assert.Equal(t, req.URL.Path, fmt.Sprintf("/api/v1/{{ camelCase .Name }}s/%d", expected), "expected and actual path don't match")
					assert.Equal(t, req.Method, http.MethodDelete)

					res.WriteHeader(http.StatusOK)
				},
			),
		)

		err := buildTestClient(t, ts).Archive{{ .Name }}(ctx, expected)

		assert.NoError(t, err, "no error should be returned")
	})
}
