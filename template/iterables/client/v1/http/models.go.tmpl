package client

import (
	"context"
	"net/http"
	"strconv"

	"{{ .OutputRepository }}/models/v1"

	"github.com/pkg/errors"
)

const (
	{{ lower .Name }}sBasePath = "{{ lower .Name }}s"
)

// BuildGet{{ camelcase .Name }}Request builds an HTTP request for fetching an {{ lower .Name }}
func (c *V1Client) BuildGet{{ camelcase .Name }}Request(ctx context.Context, id uint64) (*http.Request, error) {
	uri := c.BuildURL(nil, {{ lower .Name }}sBasePath, strconv.FormatUint(id, 10))

	return http.NewRequest(http.MethodGet, uri, nil)
}

// Get{{ camelcase .Name }} retrieves an {{ lower .Name }}
func (c *V1Client) Get{{ camelcase .Name }}(ctx context.Context, id uint64) ({{ lower .Name }} *models.{{ camelcase .Name }}, err error) {
	req, err := c.BuildGet{{ camelcase .Name }}Request(ctx, id)
	if err != nil {
		return nil, errors.Wrap(err, "building request")
	}

	if retrieveErr := c.retrieve(ctx, req, &{{ lower .Name }}); retrieveErr != nil {
		return nil, retrieveErr
	}

	return {{ lower .Name }}, nil
}

// BuildGet{{ camelcase .Name }}sRequest builds an HTTP request for fetching {{ lower .Name }}s
func (c *V1Client) BuildGet{{ camelcase .Name }}sRequest(ctx context.Context, filter *models.QueryFilter) (*http.Request, error) {
	uri := c.BuildURL(filter.ToValues(), {{ lower .Name }}sBasePath)

	return http.NewRequest(http.MethodGet, uri, nil)
}

// Get{{ camelcase .Name }}s retrieves a list of {{ lower .Name }}s
func (c *V1Client) Get{{ camelcase .Name }}s(ctx context.Context, filter *models.QueryFilter) ({{ lower .Name }}s *models.{{ camelcase .Name }}List, err error) {
	req, err := c.BuildGet{{ camelcase .Name }}sRequest(ctx, filter)
	if err != nil {
		return nil, errors.Wrap(err, "building request")
	}

	if retrieveErr := c.retrieve(ctx, req, &{{ lower .Name }}s); retrieveErr != nil {
		return nil, retrieveErr
	}

	return {{ lower .Name }}s, nil
}

// BuildCreate{{ camelcase .Name }}Request builds an HTTP request for creating an {{ lower .Name }}
func (c *V1Client) BuildCreate{{ camelcase .Name }}Request(ctx context.Context, body *models.{{ camelcase .Name }}CreationInput) (*http.Request, error) {
	uri := c.BuildURL(nil, {{ lower .Name }}sBasePath)

	return c.buildDataRequest(http.MethodPost, uri, body)
}

// Create{{ camelcase .Name }} creates an {{ lower .Name }}
func (c *V1Client) Create{{ camelcase .Name }}(ctx context.Context, input *models.{{ camelcase .Name }}CreationInput) ({{ lower .Name }} *models.{{ camelcase .Name }}, err error) {
	req, err := c.BuildCreate{{ camelcase .Name }}Request(ctx, input)
	if err != nil {
		return nil, errors.Wrap(err, "building request")
	}

	err = c.executeRequest(ctx, req, &{{ lower .Name }})
	return {{ lower .Name }}, err
}

// BuildUpdate{{ camelcase .Name }}Request builds an HTTP request for updating an {{ lower .Name }}
func (c *V1Client) BuildUpdate{{ camelcase .Name }}Request(ctx context.Context, updated *models.{{ camelcase .Name }}) (*http.Request, error) {
	uri := c.BuildURL(nil, {{ lower .Name }}sBasePath, strconv.FormatUint(updated.ID, 10))

	return c.buildDataRequest(http.MethodPut, uri, updated)
}

// Update{{ camelcase .Name }} updates an {{ lower .Name }}
func (c *V1Client) Update{{ camelcase .Name }}(ctx context.Context, updated *models.{{ camelcase .Name }}) error {
	req, err := c.BuildUpdate{{ camelcase .Name }}Request(ctx, updated)
	if err != nil {
		return errors.Wrap(err, "building request")
	}

	return c.executeRequest(ctx, req, &updated)
}

// BuildArchive{{ camelcase .Name }}Request builds an HTTP request for updating an {{ lower .Name }}
func (c *V1Client) BuildArchive{{ camelcase .Name }}Request(ctx context.Context, id uint64) (*http.Request, error) {
	uri := c.BuildURL(nil, {{ lower .Name }}sBasePath, strconv.FormatUint(id, 10))

	return http.NewRequest(http.MethodDelete, uri, nil)
}

// Archive{{ camelcase .Name }} archives an {{ lower .Name }}
func (c *V1Client) Archive{{ camelcase .Name }}(ctx context.Context, id uint64) error {
	req, err := c.BuildArchive{{ camelcase .Name }}Request(ctx, id)
	if err != nil {
		return errors.Wrap(err, "building request")
	}

	return c.executeRequest(ctx, req, nil)
}
