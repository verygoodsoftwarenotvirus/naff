package dbclient

import (
	"context"
	"strconv"

	"{{ .OutputRepository }}/models/v1"

	"go.opencensus.io/trace"
)

var _ models.{{ .SingularTitlecase }}DataManager = (*Client)(nil)

// attach{{ .SingularTitlecase }}IDToSpan provides a consistent way to attach an {{ .SingularLowercase  }}'s ID to a span
func attach{{ .SingularTitlecase }}IDToSpan(span *trace.Span, {{ .SingularLowercase  }}ID uint64) {
	if span != nil {
		span.AddAttributes(trace.StringAttribute("{{ .SingularLowercase  }}_id", strconv.FormatUint({{ .SingularLowercase  }}ID, 10)))
	}
}

// Get{{ .SingularTitlecase }} fetches an {{ .SingularLowercase  }} from the database
func (c *Client) Get{{ .SingularTitlecase }}(ctx context.Context, {{ .SingularLowercase  }}ID, userID uint64) (*models.{{ .SingularTitlecase }}, error) {
	ctx, span := trace.StartSpan(ctx, "Get{{ .SingularTitlecase }}")
	defer span.End()

	attachUserIDToSpan(span, userID)
	attach{{ .SingularTitlecase }}IDToSpan(span, {{ .SingularLowercase  }}ID)

	c.logger.WithValues(map[string]interface{}{
		"{{ .SingularLowercase  }}_id": {{ .SingularLowercase  }}ID,
		"user_id": userID,
	}).Debug("Get{{ .SingularTitlecase }} called")

	return c.querier.Get{{ .SingularTitlecase }}(ctx, {{ .SingularLowercase  }}ID, userID)
}

// Get{{ .SingularTitlecase }}Count fetches the count of {{ .PluralLowercase }} from the database that meet a particular filter
func (c *Client) Get{{ .SingularTitlecase }}Count(ctx context.Context, filter *models.QueryFilter, userID uint64) (count uint64, err error) {
	ctx, span := trace.StartSpan(ctx, "Get{{ .SingularTitlecase }}Count")
	defer span.End()

	attachUserIDToSpan(span, userID)
	attachFilterToSpan(span, filter)

	c.logger.WithValue("user_id", userID).Debug("Get{{ .SingularTitlecase }}Count called")

	return c.querier.Get{{ .SingularTitlecase }}Count(ctx, filter, userID)
}

// GetAll{{ .PluralTitlecase }}Count fetches the count of {{ .PluralLowercase }} from the database that meet a particular filter
func (c *Client) GetAll{{ .PluralTitlecase }}Count(ctx context.Context) (count uint64, err error) {
	ctx, span := trace.StartSpan(ctx, "GetAll{{ .PluralTitlecase }}Count")
	defer span.End()

	c.logger.Debug("GetAll{{ .PluralTitlecase }}Count called")

	return c.querier.GetAll{{ .PluralTitlecase }}Count(ctx)
}

// Get{{ .PluralTitlecase }} fetches a list of {{ .PluralLowercase }} from the database that meet a particular filter
func (c *Client) Get{{ .PluralTitlecase }}(ctx context.Context, filter *models.QueryFilter, userID uint64) (*models.{{ .SingularTitlecase }}List, error) {
	ctx, span := trace.StartSpan(ctx, "Get{{ .PluralTitlecase }}")
	defer span.End()

	attachUserIDToSpan(span, userID)
	attachFilterToSpan(span, filter)

	c.logger.WithValue("user_id", userID).Debug("Get{{ .PluralTitlecase }} called")

	{{ .SingularLowercase  }}List, err := c.querier.Get{{ .PluralTitlecase }}(ctx, filter, userID)

	return {{ .SingularLowercase  }}List, err
}

// GetAll{{ .PluralTitlecase }}ForUser fetches a list of {{ .PluralLowercase }} from the database that meet a particular filter
func (c *Client) GetAll{{ .PluralTitlecase }}ForUser(ctx context.Context, userID uint64) ([]models.{{ .SingularTitlecase }}, error) {
	ctx, span := trace.StartSpan(ctx, "GetAll{{ .PluralTitlecase }}ForUser")
	defer span.End()

	attachUserIDToSpan(span, userID)
	c.logger.WithValue("user_id", userID).Debug("GetAll{{ .PluralTitlecase }}ForUser called")

	{{ .SingularLowercase  }}List, err := c.querier.GetAll{{ .PluralTitlecase }}ForUser(ctx, userID)

	return {{ .SingularLowercase  }}List, err
}

// Create{{ .SingularTitlecase }} creates an {{ .SingularLowercase  }} in the database
func (c *Client) Create{{ .SingularTitlecase }}(ctx context.Context, input *models.{{ .SingularTitlecase }}CreationInput) (*models.{{ .SingularTitlecase }}, error) {
	ctx, span := trace.StartSpan(ctx, "Create{{ .SingularTitlecase }}")
	defer span.End()

	c.logger.WithValue("input", input).Debug("Create{{ .SingularTitlecase }} called")

	return c.querier.Create{{ .SingularTitlecase }}(ctx, input)
}

// Update{{ .SingularTitlecase }} updates a particular {{ .SingularLowercase  }}. Note that Update{{ .SingularTitlecase }} expects the
// provided input to have a valid ID.
func (c *Client) Update{{ .SingularTitlecase }}(ctx context.Context, input *models.{{ .SingularTitlecase }}) error {
	ctx, span := trace.StartSpan(ctx, "Update{{ .SingularTitlecase }}")
	defer span.End()

	attach{{ .SingularTitlecase }}IDToSpan(span, input.ID)
	c.logger.WithValue("{{ .SingularLowercase  }}_id", input.ID).Debug("Update{{ .SingularTitlecase }} called")

	return c.querier.Update{{ .SingularTitlecase }}(ctx, input)
}

// Archive{{ .SingularTitlecase }} archives an {{ .SingularLowercase  }} from the database by its ID
func (c *Client) Archive{{ .SingularTitlecase }}(ctx context.Context, {{ .SingularLowercase  }}ID, userID uint64) error {
	ctx, span := trace.StartSpan(ctx, "Archive{{ .SingularTitlecase }}")
	defer span.End()

	attachUserIDToSpan(span, userID)
	attach{{ .SingularTitlecase }}IDToSpan(span, {{ .SingularLowercase  }}ID)

	c.logger.WithValues(map[string]interface{}{
		"{{ .SingularLowercase  }}_id": {{ .SingularLowercase  }}ID,
		"user_id": userID,
	}).Debug("Archive{{ .SingularTitlecase }} called")

	return c.querier.Archive{{ .SingularTitlecase }}(ctx, {{ .SingularLowercase  }}ID, userID)
}
