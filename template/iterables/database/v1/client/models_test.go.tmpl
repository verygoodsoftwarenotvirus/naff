package dbclient

import (
	"context"
	"testing"

	"{{ .OutputRepository }}/models/v1"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestClient_Get{{ camelcase .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("obligatory", func(t *testing.T) {
		example{{ camelcase .Name }}ID := uint64(123)
		exampleUserID := uint64(123)
		expected := &models.{{ camelcase .Name }}{}

		c, mockDB := buildTestClient()
		mockDB.{{ camelcase .Name }}DataManager.
			On("Get{{ camelcase .Name }}", mock.Anything, example{{ camelcase .Name }}ID, exampleUserID).
			Return(expected, nil)

		actual, err := c.Get{{ camelcase .Name }}(context.Background(), example{{ camelcase .Name }}ID, exampleUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		mockDB.AssertExpectations(t)
	})
}

func TestClient_Get{{ camelcase .Name }}Count(T *testing.T) {
	T.Parallel()

	T.Run("obligatory", func(t *testing.T) {
		expected := uint64(321)
		exampleUserID := uint64(123)

		c, mockDB := buildTestClient()
		mockDB.{{ camelcase .Name }}DataManager.
			On("Get{{ camelcase .Name }}Count", mock.Anything, models.DefaultQueryFilter(), exampleUserID).
			Return(expected, nil)

		actual, err := c.Get{{ camelcase .Name }}Count(context.Background(), models.DefaultQueryFilter(), exampleUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		mockDB.AssertExpectations(t)
	})

	T.Run("with nil filter", func(t *testing.T) {
		expected := uint64(321)
		exampleUserID := uint64(123)

		c, mockDB := buildTestClient()
		mockDB.{{ camelcase .Name }}DataManager.
			On("Get{{ camelcase .Name }}Count", mock.Anything, (*models.QueryFilter)(nil), exampleUserID).
			Return(expected, nil)

		actual, err := c.Get{{ camelcase .Name }}Count(context.Background(), nil, exampleUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		mockDB.AssertExpectations(t)
	})
}

func TestClient_GetAll{{ camelcase .Name }}sCount(T *testing.T) {
	T.Parallel()

	T.Run("obligatory", func(t *testing.T) {
		expected := uint64(321)
		c, mockDB := buildTestClient()
		mockDB.{{ camelcase .Name }}DataManager.
			On("GetAll{{ camelcase .Name }}sCount", mock.Anything).
			Return(expected, nil)

		actual, err := c.GetAll{{ camelcase .Name }}sCount(context.Background())
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		mockDB.AssertExpectations(t)
	})
}

func TestClient_Get{{ camelcase .Name }}s(T *testing.T) {
	T.Parallel()

	T.Run("obligatory", func(t *testing.T) {
		exampleUserID := uint64(123)
		c, mockDB := buildTestClient()
		expected := &models.{{ camelcase .Name }}List{}

		mockDB.{{ camelcase .Name }}DataManager.
			On("Get{{ camelcase .Name }}s", mock.Anything, models.DefaultQueryFilter(), exampleUserID).
			Return(expected, nil)

		actual, err := c.Get{{ camelcase .Name }}s(context.Background(), models.DefaultQueryFilter(), exampleUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		mockDB.AssertExpectations(t)
	})

	T.Run("with nil filter", func(t *testing.T) {
		exampleUserID := uint64(123)
		c, mockDB := buildTestClient()
		expected := &models.{{ camelcase .Name }}List{}

		mockDB.{{ camelcase .Name }}DataManager.
			On("Get{{ camelcase .Name }}s", mock.Anything, (*models.QueryFilter)(nil), exampleUserID).
			Return(expected, nil)

		actual, err := c.Get{{ camelcase .Name }}s(context.Background(), nil, exampleUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		mockDB.AssertExpectations(t)
	})
}

func TestClient_Create{{ camelcase .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("obligatory", func(t *testing.T) {
		exampleInput := &models.{{ camelcase .Name }}CreationInput{}
		c, mockDB := buildTestClient()
		expected := &models.{{ camelcase .Name }}{}

		mockDB.{{ camelcase .Name }}DataManager.
			On("Create{{ camelcase .Name }}", mock.Anything, exampleInput).
			Return(expected, nil)

		actual, err := c.Create{{ camelcase .Name }}(context.Background(), exampleInput)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		mockDB.AssertExpectations(t)
	})
}

func TestClient_Update{{ camelcase .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("obligatory", func(t *testing.T) {
		exampleInput := &models.{{ camelcase .Name }}{}
		c, mockDB := buildTestClient()
		var expected error

		mockDB.{{ camelcase .Name }}DataManager.
			On("Update{{ camelcase .Name }}", mock.Anything, exampleInput).
			Return(expected)

		err := c.Update{{ camelcase .Name }}(context.Background(), exampleInput)
		assert.NoError(t, err)
	})
}

func TestClient_Archive{{ camelcase .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("obligatory", func(t *testing.T) {
		exampleUserID := uint64(123)
		example{{ camelcase .Name }}ID := uint64(123)
		var expected error

		c, mockDB := buildTestClient()
		mockDB.{{ camelcase .Name }}DataManager.On("Archive{{ camelcase .Name }}", mock.Anything, example{{ camelcase .Name }}ID, exampleUserID).
			Return(expected)

		err := c.Archive{{ camelcase .Name }}(context.Background(), exampleUserID, example{{ camelcase .Name }}ID)
		assert.NoError(t, err)
	})
}
