package sqlite

import (
	"context"
	"database/sql"
	"errors"
	"testing"
	"time"

	"{{ .OutputRepository }}/models/v1"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/stretchr/testify/assert"
)
func buildMockRowFrom{{ .Name }}({{ camelCase .Name}} *models.{{ .Name }}) *sqlmock.Rows {
	exampleRows := sqlmock.NewRows({{ camelCase .Name}}sTableColumns).
		AddRow(
			{{ camelCase .Name}}.ID,
		{{ $og := . }}{{ range $j, $field := .Fields }}
			{{ camelCase $og.Name}}.{{ pascal $field.Name }},
		{{ end }}
			{{ camelCase .Name}}.CreatedOn,
			{{ camelCase .Name}}.UpdatedOn,
			{{ camelCase .Name}}.ArchivedOn,
			{{ camelCase .Name}}.BelongsTo,
		)

	return exampleRows
}

func buildErroneousMockRowFrom{{ .Name }}({{ camelCase .Name}} *models.{{ .Name }}) *sqlmock.Rows {
	exampleRows := sqlmock.NewRows({{ camelCase .Name}}sTableColumns).
		AddRow(
			{{ camelCase .Name}}.ArchivedOn,
		{{ $og := . }}{{ range $j, $field := .Fields }}
			{{ camelCase $og.Name}}.{{ pascal $field.Name }},
		{{ end }}
			{{ camelCase .Name}}.CreatedOn,
			{{ camelCase .Name}}.UpdatedOn,
			{{ camelCase .Name}}.BelongsTo,
			{{ camelCase .Name}}.ID,
		)

	return exampleRows
}

func TestSqlite_buildGet{{ .Name }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		s, _ := buildTestService(t)
		example{{ .Name }}ID := uint64(123)
		exampleUserID := uint64(321)

		expectedArgCount := 2
		expectedQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE belongs_to = ? AND id = ?"

		actualQuery, args := s.buildGet{{ .Name }}Query(example{{ .Name }}ID, exampleUserID)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, exampleUserID, args[0].(uint64))
		assert.Equal(t, example{{ .Name }}ID, args[1].(uint64))
	})
}

func TestSqlite_Get{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE belongs_to = ? AND id = ?"
		expected := &models.{{ .Name }}{
			ID:      123,
			
		{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
		{{ end }}
		}
		expectedUserID := uint64(321)

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(expectedUserID, expected.ID).
			WillReturnRows(
				buildMockRowFrom{{ .Name }}(expected),
			)

		actual, err := s.Get{{ .Name }}(context.Background(), expected.ID, expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("surfaces sql.ErrNoRows", func(t *testing.T) {
		expectedQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE belongs_to = ? AND id = ?"
		expected := &models.{{ .Name }}{
			ID:      123,
			
		{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
		{{ end }}
		}
		expectedUserID := uint64(321)

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(expectedUserID, expected.ID).
			WillReturnError(sql.ErrNoRows)

		actual, err := s.Get{{ .Name }}(context.Background(), expected.ID, expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)
		assert.Equal(t, sql.ErrNoRows, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestSqlite_buildGet{{ .Name }}CountQuery(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		s, _ := buildTestService(t)
		exampleUserID := uint64(321)

		expectedArgCount := 1
		expectedQuery := "SELECT COUNT(id) FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"

		actualQuery, args := s.buildGet{{ .Name }}CountQuery(models.DefaultQueryFilter(), exampleUserID)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, exampleUserID, args[0].(uint64))
	})
}

func TestSqlite_Get{{ .Name }}Count(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expectedQuery := "SELECT COUNT(id) FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"
		expectedCount := uint64(666)

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				sqlmock.NewRows([]string{"count"}).AddRow(expectedCount),
			)

		actualCount, err := s.Get{{ .Name }}Count(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expectedCount, actualCount)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestSqlite_buildGetAll{{ .Name }}sCountQuery(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		s, _ := buildTestService(t)
		expectedQuery := "SELECT COUNT(id) FROM {{ camelCase .Name }}s WHERE archived_on IS NULL"

		actualQuery := s.buildGetAll{{ .Name }}sCountQuery()
		assert.Equal(t, expectedQuery, actualQuery)
	})
}

func TestSqlite_GetAll{{ .Name }}sCount(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedQuery := "SELECT COUNT(id) FROM {{ camelCase .Name }}s WHERE archived_on IS NULL"
		expectedCount := uint64(666)

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WillReturnRows(
				sqlmock.NewRows([]string{"count"}).AddRow(expectedCount),
			)

		actualCount, err := s.GetAll{{ .Name }}sCount(context.Background())
		assert.NoError(t, err)
		assert.Equal(t, expectedCount, actualCount)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestSqlite_buildGet{{ .Name }}sQuery(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		s, _ := buildTestService(t)
		exampleUserID := uint64(321)

		expectedArgCount := 1
		expectedQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"

		actualQuery, args := s.buildGet{{ .Name }}sQuery(models.DefaultQueryFilter(), exampleUserID)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, exampleUserID, args[0].(uint64))
	})
}

func TestSqlite_Get{{ .Name }}s(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .Name }}1 := &models.{{ .Name }}{
			
		{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
		{{ end }}
			
		}

		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"
		expectedCountQuery := "SELECT COUNT(id) FROM {{ camelCase .Name }}s WHERE archived_on IS NULL"
		expectedCount := uint64(666)

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildMockRowFrom{{ .Name }}(expected{{ .Name }}1),
			)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedCountQuery)).
			WillReturnRows(
				sqlmock.NewRows([]string{"count"}).AddRow(expectedCount),
			)

		expected := &models.{{ .Name }}List{
			Pagination: models.Pagination{
				Page:       1,
				Limit:      20,
				TotalCount: expectedCount,
			},
			{{ .Name }}s: []models.{{ .Name }}{
				*expected{{ .Name }}1,
			},
		}

		actual, err := s.Get{{ .Name }}s(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("surfaces sql.ErrNoRows", func(t *testing.T) {
		expectedUserID := uint64(123)
		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(sql.ErrNoRows)

		actual, err := s.Get{{ .Name }}s(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)
		assert.Equal(t, sql.ErrNoRows, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error executing read query", func(t *testing.T) {
		expectedUserID := uint64(123)

		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"
		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(errors.New("blah"))

		actual, err := s.Get{{ .Name }}s(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error scanning {{ camelCase .Name }}", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .Name }}1 := &models.{{ .Name }}{
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
		}

		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildErroneousMockRowFrom{{ .Name }}(expected{{ .Name }}1),
			)

		actual, err := s.Get{{ .Name }}s(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error querying for count", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .Name }}1 := &models.{{ .Name }}{
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
		}

		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ? LIMIT 20"
		expectedCountQuery := "SELECT COUNT(id) FROM {{ camelCase .Name }}s WHERE archived_on IS NULL"

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildMockRowFrom{{ .Name }}(expected{{ .Name }}1),
			)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedCountQuery)).
			WillReturnError(errors.New("blah"))

		actual, err := s.Get{{ .Name }}s(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

}

func TestSqlite_GetAll{{ .Name }}sForUser(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .Name }} := &models.{{ .Name }}{
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
		}
		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildMockRowFrom{{ .Name }}(expected{{ .Name }}),
			)

		expected := []models.{{ .Name }}{*expected{{ .Name }}}

		actual, err := s.GetAll{{ .Name }}sForUser(context.Background(), expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("surfaces sql.ErrNoRows", func(t *testing.T) {
		expectedUserID := uint64(123)
		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(sql.ErrNoRows)

		actual, err := s.GetAll{{ .Name }}sForUser(context.Background(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)
		assert.Equal(t, sql.ErrNoRows, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error querying database", func(t *testing.T) {
		expectedUserID := uint64(123)
		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(errors.New("blah"))

		actual, err := s.GetAll{{ .Name }}sForUser(context.Background(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with unscannable response", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .Name }} := &models.{{ .Name }}{
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
		}
		expectedListQuery := "SELECT id, created_on, updated_on, archived_on, belongs_to FROM {{ camelCase .Name }}s WHERE archived_on IS NULL AND belongs_to = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildErroneousMockRowFrom{{ .Name }}(expected{{ .Name }}),
			)

		actual, err := s.GetAll{{ .Name }}sForUser(context.Background(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestSqlite_buildCreate{{ .Name }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		s, _ := buildTestService(t)
		expected := &models.{{ .Name }}{
			
		{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
		{{ end }}
			BelongsTo: 123,
		}

		expectedArgCount := 3
		expectedQuery := "INSERT INTO {{ camelCase .Name }}s (belongs_to) VALUES (?,?,?)"

		actualQuery, args := s.buildCreate{{ .Name }}Query(expected)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		{{ range $j, $field := .Fields }}
		assert.Equal(t, expected.{{ pascal $field.Name }}, args[{{ $j }}].({{ $field.Type }}))
		{{ end }}
		assert.Equal(t, expected.BelongsTo, args[len(args)-1].(uint64))
	})
}

func TestSqlite_Create{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expected := &models.{{ .Name }}{
			ID:        123,
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}
		expectedInput := &models.{{ .Name }}CreationInput{
			Name:      expected.Name,
			BelongsTo: expected.BelongsTo,
		}

		expectedCreationQuery := "INSERT INTO {{ camelCase .Name }}s (belongs_to) VALUES (?,?,?)"
		s, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedCreationQuery)).
			WithArgs(
			{{ range $j, $field := .Fields }}
				expected.{{ pascal $field.Name }},
			{{ end }}
				expected.BelongsTo,
			).
			WillReturnResult(sqlmock.NewResult(int64(expected.ID), 1))

		expectedTimeQuery := "SELECT created_on FROM {{ camelCase .Name }}s WHERE id = ?"
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedTimeQuery)).
			WithArgs(expected.ID).
			WillReturnRows(sqlmock.NewRows([]string{"created_on"}).AddRow(expected.CreatedOn))

		actual, err := s.Create{{ .Name }}(context.Background(), expectedInput)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error writing to database", func(t *testing.T) {
		expectedUserID := uint64(321)
		example := &models.{{ .Name }}{
			ID:        123,
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}
		expectedInput := &models.{{ .Name }}CreationInput{
			Name:      example.Name,
			BelongsTo: example.BelongsTo,
		}

		expectedQuery := "INSERT INTO {{ camelCase .Name }}s (belongs_to) VALUES (?,?,?)"

		s, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
			{{ range $j, $field := .Fields }}
				example.{{ pascal $field.Name }},
			{{ end }}
				example.BelongsTo,
			).
			WillReturnError(errors.New("blah"))

		actual, err := s.Create{{ .Name }}(context.Background(), expectedInput)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestSqlite_buildUpdate{{ .Name }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		s, _ := buildTestService(t)
		expected := &models.{{ .Name }}{
			ID:        321,
			
		{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
		{{ end }}
			BelongsTo: 123,
		}

		expectedArgCount := 4
		expectedQuery := "UPDATE {{ camelCase .Name }}s SET name = ?, details = ?, updated_on = (strftime('%s','now')) WHERE belongs_to = ? AND id = ?"

		actualQuery, args := s.buildUpdate{{ .Name }}Query(expected)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		{{ range $j, $field := .Fields }}
		assert.Equal(t, expected.{{ pascal $field.Name }}, args[{{ $j }}].({{ $field.Type }}))
		{{ end }}
		assert.Equal(t, expected.BelongsTo, args[len(args)-1].(uint64))
		assert.Equal(t, expected.ID, args[3].(uint64))
	})
}

func TestSqlite_Update{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expected := &models.{{ .Name }}{
			ID:        123,
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}

		expectedQuery := "UPDATE {{ camelCase .Name }}s SET name = ?, details = ?, updated_on = (strftime('%s','now')) WHERE belongs_to = ? AND id = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				{{ range $j, $field := .Fields }}
					expected.{{ pascal $field.Name }},
				{{ end }}
				expected.BelongsTo,
				expected.ID,
			).
			WillReturnResult(sqlmock.NewResult(int64(expected.ID), 1))

		err := s.Update{{ .Name }}(context.Background(), expected)
		assert.NoError(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error writing to database", func(t *testing.T) {
		expectedUserID := uint64(321)
		example := &models.{{ .Name }}{
			ID:        123,
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}

		expectedQuery := "UPDATE {{ camelCase .Name }}s SET name = ?, details = ?, updated_on = (strftime('%s','now')) WHERE belongs_to = ? AND id = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
			{{ range $j, $field := .Fields }}
				example.{{ pascal $field.Name }},
			{{ end }}
				example.BelongsTo,
				example.ID,
			).
			WillReturnError(errors.New("blah"))

		err := s.Update{{ .Name }}(context.Background(), example)
		assert.Error(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestSqlite_buildArchive{{ .Name }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		s, _ := buildTestService(t)
		expected := &models.{{ .Name }}{
			ID:        321,
			
		{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
		{{ end }}
			BelongsTo: 123,
		}

		expectedArgCount := 2
		expectedQuery := "UPDATE {{ camelCase .Name }}s SET updated_on = (strftime('%s','now')), archived_on = (strftime('%s','now')) WHERE archived_on IS NULL AND belongs_to = ? AND id = ?"
		actualQuery, args := s.buildArchive{{ .Name }}Query(expected.ID, expected.BelongsTo)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, expected.BelongsTo, args[0].(uint64))
		assert.Equal(t, expected.ID, args[1].(uint64))
	})
}

func TestSqlite_Archive{{ .Name }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expected := &models.{{ .Name }}{
			ID:        123,
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}

		expectedQuery := "UPDATE {{ camelCase .Name }}s SET updated_on = (strftime('%s','now')), archived_on = (strftime('%s','now')) WHERE archived_on IS NULL AND belongs_to = ? AND id = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				expected.BelongsTo,
				expected.ID,
			).
			WillReturnResult(sqlmock.NewResult(1, 1))

		err := s.Archive{{ .Name }}(context.Background(), expected.ID, expectedUserID)
		assert.NoError(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error writing to database", func(t *testing.T) {
		expectedUserID := uint64(321)
		example := &models.{{ .Name }}{
			ID:        123,
			{{ range $j, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}

		expectedQuery := "UPDATE {{ camelCase .Name }}s SET updated_on = (strftime('%s','now')), archived_on = (strftime('%s','now')) WHERE archived_on IS NULL AND belongs_to = ? AND id = ?"

		s, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				example.BelongsTo,
				example.ID,
			).
			WillReturnError(errors.New("blah"))

		err := s.Archive{{ .Name }}(context.Background(), example.ID, expectedUserID)
		assert.Error(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}
