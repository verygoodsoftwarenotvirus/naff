package postgres

import (
	"context"
	"database/sql"
	"sync"

	"{{ .OutputRepository }}/database/v1"
	"{{ .OutputRepository }}/internal/logging/v1"
	"{{ .OutputRepository }}/models/v1"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
)

const (
	{{ camelCase .Name }}sTableName = "{{ snakecase .Name }}s"
)

var (
	{{ camelCase .Name }}sTableColumns = []string{
		"id",
		{{ range $j, $field := .Fields }}
			"{{ snakecase $field.Name }}",
		{{ end }}
		"created_on",
		"updated_on",
		"archived_on",
		"belongs_to",
	}
)

// scan{{ .Name }} takes a database Scanner (i.e. *sql.Row) and scans
// the result into an {{ .Name }} struct
func scan{{ .Name }}(scan database.Scanner) (*models.{{ .Name }}, error) {
	x := &models.{{ .Name }}{}

	if err := scan.Scan(
		&x.ID,
		{{ range $j, $field := .Fields }}
			&x.{{ pascal $field.Name }},
		{{ end }}
		&x.CreatedOn,
		&x.UpdatedOn,
		&x.ArchivedOn,
		&x.BelongsTo,
	); err != nil {
		return nil, err
	}

	return x, nil
}

// scan{{ .Name }}s takes a logger and some database rows and turns them into a slice of {{ camelCase .Name }}s
func scan{{ .Name }}s(logger logging.Logger, rows *sql.Rows) ([]models.{{ .Name }}, error) {
	var list []models.{{ .Name }}

	for rows.Next() {
		x, err := scan{{ .Name }}(rows)
		if err != nil {
			return nil, err
		}
		list = append(list, *x)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	if closeErr := rows.Close(); closeErr != nil {
		logger.Error(closeErr, "closing database rows")
	}

	return list, nil
}

// buildGet{{ .Name }}Query constructs a SQL query for fetching an {{ camelCase .Name }} with a given ID belong to a user with a given ID.
func (p *Postgres) buildGet{{ .Name }}Query({{ camelCase .Name }}ID, userID uint64) (query string, args []interface{}) {
	var err error
	query, args, err = p.sqlBuilder.
		Select({{ camelCase .Name }}sTableColumns...).
		From({{ camelCase .Name }}sTableName).
		Where(squirrel.Eq{
			"id":         {{ camelCase .Name }}ID,
			"belongs_to": userID,
		}).
		ToSql()

	logQueryBuildingError(p.logger, err)

	return query, args
}

// Get{{ .Name }} fetches an {{ camelCase .Name }} from the postgres database
func (p *Postgres) Get{{ .Name }}(ctx context.Context, {{ camelCase .Name }}ID, userID uint64) (*models.{{ .Name }}, error) {
	query, args := p.buildGet{{ .Name }}Query({{ camelCase .Name }}ID, userID)
	row := p.db.QueryRowContext(ctx, query, args...)
	return scan{{ .Name }}(row)
}

// buildGet{{ .Name }}CountQuery takes a QueryFilter and a user ID and returns a SQL query (and the relevant arguments) for
// fetching the number of {{ camelCase .Name }}s belonging to a given user that meet a given query
func (p *Postgres) buildGet{{ .Name }}CountQuery(filter *models.QueryFilter, userID uint64) (query string, args []interface{}) {
	var err error
	builder := p.sqlBuilder.
		Select(CountQuery).
		From({{ camelCase .Name }}sTableName).
		Where(squirrel.Eq{
			"archived_on": nil,
			"belongs_to":  userID,
		})

	if filter != nil {
		builder = filter.ApplyToQueryBuilder(builder)
	}

	query, args, err = builder.ToSql()
	logQueryBuildingError(p.logger, err)

	return query, args
}

// Get{{ .Name }}Count will fetch the count of {{ camelCase .Name }}s from the database that meet a particular filter and belong to a particular user.
func (p *Postgres) Get{{ .Name }}Count(ctx context.Context, filter *models.QueryFilter, userID uint64) (count uint64, err error) {
	query, args := p.buildGet{{ .Name }}CountQuery(filter, userID)
	err = p.db.QueryRowContext(ctx, query, args...).Scan(&count)
	return count, err
}

var (
	all{{ .Name }}sCountQueryBuilder sync.Once
	all{{ .Name }}sCountQuery        string
)

// buildGetAll{{ .Name }}sCountQuery returns a query that fetches the total number of {{ camelCase .Name }}s in the database.
// This query only gets generated once, and is otherwise returned from cache.
func (p *Postgres) buildGetAll{{ .Name }}sCountQuery() string {
	all{{ .Name }}sCountQueryBuilder.Do(func() {
		var err error
		all{{ .Name }}sCountQuery, _, err = p.sqlBuilder.Select(CountQuery).
			From({{ camelCase .Name }}sTableName).
			Where(squirrel.Eq{"archived_on": nil}).
			ToSql()
		logQueryBuildingError(p.logger, err)
	})

	return all{{ .Name }}sCountQuery
}

// GetAll{{ .Name }}sCount will fetch the count of {{ camelCase .Name }}s from the database
func (p *Postgres) GetAll{{ .Name }}sCount(ctx context.Context) (count uint64, err error) {
	err = p.db.QueryRowContext(ctx, p.buildGetAll{{ .Name }}sCountQuery()).Scan(&count)
	return count, err
}

// buildGet{{ .Name }}sQuery builds a SQL query selecting {{ camelCase .Name }}s that adhere to a given QueryFilter and belong to a given user,
// and returns both the query and the relevant args to pass to the query executor.
func (p *Postgres) buildGet{{ .Name }}sQuery(filter *models.QueryFilter, userID uint64) (query string, args []interface{}) {
	var err error
	builder := p.sqlBuilder.
		Select({{ camelCase .Name }}sTableColumns...).
		From({{ camelCase .Name }}sTableName).
		Where(squirrel.Eq{
			"archived_on": nil,
			"belongs_to":  userID,
		})

	if filter != nil {
		builder = filter.ApplyToQueryBuilder(builder)
	}

	query, args, err = builder.ToSql()
	logQueryBuildingError(p.logger, err)

	return query, args
}

// Get{{ .Name }}s fetches a list of {{ camelCase .Name }}s from the database that meet a particular filter
func (p *Postgres) Get{{ .Name }}s(ctx context.Context, filter *models.QueryFilter, userID uint64) (*models.{{ .Name }}List, error) {
	query, args := p.buildGet{{ .Name }}sQuery(filter, userID)

	rows, err := p.db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, buildError(err, "querying database for {{ camelCase .Name }}s")
	}

	list, err := scan{{ .Name }}s(p.logger, rows)
	if err != nil {
		return nil, errors.Wrap(err, "scanning response from database")
	}

	count, err := p.Get{{ .Name }}Count(ctx, filter, userID)
	if err != nil {
		return nil, errors.Wrap(err, "fetching {{ camelCase .Name }} count")
	}

	x := &models.{{ .Name }}List{
		Pagination: models.Pagination{
			Page:       filter.Page,
			Limit:      filter.Limit,
			TotalCount: count,
		},
		{{ .Name }}s: list,
	}

	return x, nil
}

// GetAll{{ .Name }}sForUser fetches every {{ camelCase .Name }} belonging to a user
func (p *Postgres) GetAll{{ .Name }}sForUser(ctx context.Context, userID uint64) ([]models.{{ .Name }}, error) {
	query, args := p.buildGet{{ .Name }}sQuery(nil, userID)

	rows, err := p.db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, buildError(err, "fetching {{ camelCase .Name }}s for user")
	}

	list, err := scan{{ .Name }}s(p.logger, rows)
	if err != nil {
		return nil, errors.Wrap(err, "parsing database results")
	}

	return list, nil
}

// buildCreate{{ .Name }}Query takes an {{ camelCase .Name }} and returns a creation query for that {{ camelCase .Name }} and the relevant arguments.
func (p *Postgres) buildCreate{{ .Name }}Query(input *models.{{ .Name }}) (query string, args []interface{}) {
	var err error
	query, args, err = p.sqlBuilder.
		Insert({{ camelCase .Name }}sTableName).
		Columns(
			{{ range $j, $field := .Fields }}
				{{ if $field.ValidForCreationInput }}"{{ snakecase $field.Name }}",{{ end }}
			{{ end }}
			"belongs_to",
		).
		Values(
		{{ range $j, $field := .Fields }}
			{{ if $field.ValidForCreationInput }}input.{{ pascal $field.Name }},{{ end }}
		{{ end }}
			input.BelongsTo,
		).
		Suffix("RETURNING id, created_on").
		ToSql()

	logQueryBuildingError(p.logger, err)

	return query, args
}

// Create{{ .Name }} creates an {{ camelCase .Name }} in the database
func (p *Postgres) Create{{ .Name }}(ctx context.Context, input *models.{{ .Name }}CreationInput) (*models.{{ .Name }}, error) {
	x := &models.{{ .Name }}{
		Name:      input.Name,
		Details:   input.Details,
		BelongsTo: input.BelongsTo,
	}

	query, args := p.buildCreate{{ .Name }}Query(x)

	// create the {{ camelCase .Name }}
	err := p.db.QueryRowContext(ctx, query, args...).Scan(&x.ID, &x.CreatedOn)
	if err != nil {
		return nil, errors.Wrap(err, "error executing {{ camelCase .Name }} creation query")
	}

	return x, nil
}

// buildUpdate{{ .Name }}Query takes an {{ camelCase .Name }} and returns an update SQL query, with the relevant query parameters
func (p *Postgres) buildUpdate{{ .Name }}Query(input *models.{{ .Name }}) (query string, args []interface{}) {
	var err error
	query, args, err = p.sqlBuilder.Update({{ camelCase .Name }}sTableName).
		{{ range $j, $field := .Fields }}
			{{ if $field.ValidForUpdateInput }}
				Set("{{ snakecase $field.Name }}", input.{{ pascal $field.Name }}).
			{{ end }}
		{{ end }}
		Set("updated_on", squirrel.Expr(CurrentUnixTimeQuery)).
		Where(squirrel.Eq{
			"id":         input.ID,
			"belongs_to": input.BelongsTo,
		}).
		Suffix("RETURNING updated_on").
		ToSql()

	logQueryBuildingError(p.logger, err)

	return query, args
}

// Update{{ .Name }} updates a particular {{ camelCase .Name }}. Note that Update{{ .Name }} expects the provided input to have a valid ID.
func (p *Postgres) Update{{ .Name }}(ctx context.Context, input *models.{{ .Name }}) error {
	query, args := p.buildUpdate{{ .Name }}Query(input)
	return p.db.QueryRowContext(ctx, query, args...).Scan(&input.UpdatedOn)
}

// buildArchive{{ .Name }}Query returns a SQL query which marks a given {{ camelCase .Name }} belonging to a given user as archived.
func (p *Postgres) buildArchive{{ .Name }}Query({{ camelCase .Name }}ID, userID uint64) (query string, args []interface{}) {
	var err error
	query, args, err = p.sqlBuilder.
		Update({{ camelCase .Name }}sTableName).
		Set("updated_on", squirrel.Expr(CurrentUnixTimeQuery)).
		Set("archived_on", squirrel.Expr(CurrentUnixTimeQuery)).
		Where(squirrel.Eq{
			"id":          {{ camelCase .Name }}ID,
			"archived_on": nil,
			"belongs_to":  userID,
		}).
		Suffix("RETURNING archived_on").
		ToSql()

	logQueryBuildingError(p.logger, err)

	return query, args
}

// Archive{{ .Name }} marks an {{ camelCase .Name }} as archived in the database
func (p *Postgres) Archive{{ .Name }}(ctx context.Context, {{ camelCase .Name }}ID, userID uint64) error {
	query, args := p.buildArchive{{ .Name }}Query({{ camelCase .Name }}ID, userID)
	_, err := p.db.ExecContext(ctx, query, args...)
	return err
}
