package postgres

import (
	"context"
	"database/sql"
	"errors"
	"testing"
	"time"

	"github.com/DATA-DOG/go-sqlmock"

	"{{ .OutputRepository }}/models/v1"

	"github.com/stretchr/testify/assert"
)

func buildMockRowFrom{{ .SingularTitlecase }}({{ .SingularLowercase  }} *models.{{ .SingularTitlecase }}) *sqlmock.Rows {
	exampleRows := sqlmock.NewRows({{ .PluralLowercase }}TableColumns).
		AddRow(
			{{ .SingularLowercase  }}.ID,
			{{ .SingularLowercase  }}.Name,
			{{ .SingularLowercase  }}.Details,
			{{ .SingularLowercase  }}.CreatedOn,
			{{ .SingularLowercase  }}.UpdatedOn,
			{{ .SingularLowercase  }}.ArchivedOn,
			{{ .SingularLowercase  }}.BelongsTo,
		)

	return exampleRows
}

func buildErroneousMockRowFrom{{ .SingularTitlecase }}({{ .SingularLowercase  }} *models.{{ .SingularTitlecase }}) *sqlmock.Rows {
	exampleRows := sqlmock.NewRows({{ .PluralLowercase }}TableColumns).
		AddRow(
			{{ .SingularLowercase  }}.ArchivedOn,
			{{ .SingularLowercase  }}.Name,
			{{ .SingularLowercase  }}.Details,
			{{ .SingularLowercase  }}.CreatedOn,
			{{ .SingularLowercase  }}.UpdatedOn,
			{{ .SingularLowercase  }}.BelongsTo,
			{{ .SingularLowercase  }}.ID,
		)

	return exampleRows
}

func TestPostgres_buildGet{{ .SingularTitlecase }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		p, _ := buildTestService(t)
		example{{ .SingularTitlecase }}ID := uint64(123)
		exampleUserID := uint64(321)

		expectedArgCount := 2
		expectedQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE belongs_to = $1 AND id = $2"

		actualQuery, args := p.buildGet{{ .SingularTitlecase }}Query(example{{ .SingularTitlecase }}ID, exampleUserID)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, exampleUserID, args[0].(uint64))
		assert.Equal(t, example{{ .SingularTitlecase }}ID, args[1].(uint64))
	})
}

func TestPostgres_Get{{ .SingularTitlecase }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE belongs_to = $1 AND id = $2"
		expected := &models.{{ .SingularTitlecase }}{
			ID:      123,
			Name:    "name",
			Details: "details",
		}
		expectedUserID := uint64(321)

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(expectedUserID, expected.ID).
			WillReturnRows(
				buildMockRowFrom{{ .SingularTitlecase }}(expected),
			)

		actual, err := p.Get{{ .SingularTitlecase }}(context.Background(), expected.ID, expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("surfaces sql.ErrNoRows", func(t *testing.T) {
		expectedQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE belongs_to = $1 AND id = $2"
		expected := &models.{{ .SingularTitlecase }}{
			ID:      123,
			Name:    "name",
			Details: "details",
		}
		expectedUserID := uint64(321)

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(expectedUserID, expected.ID).
			WillReturnError(sql.ErrNoRows)

		actual, err := p.Get{{ .SingularTitlecase }}(context.Background(), expected.ID, expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)
		assert.Equal(t, sql.ErrNoRows, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestPostgres_buildGet{{ .SingularTitlecase }}CountQuery(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		p, _ := buildTestService(t)
		exampleUserID := uint64(321)

		expectedArgCount := 1
		expectedQuery := "SELECT COUNT(id) FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"

		actualQuery, args := p.buildGet{{ .SingularTitlecase }}CountQuery(models.DefaultQueryFilter(), exampleUserID)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, exampleUserID, args[0].(uint64))
	})
}

func TestPostgres_Get{{ .SingularTitlecase }}Count(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expectedQuery := "SELECT COUNT(id) FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"
		expectedCount := uint64(666)

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				sqlmock.NewRows([]string{"count"}).AddRow(expectedCount),
			)

		actualCount, err := p.Get{{ .SingularTitlecase }}Count(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expectedCount, actualCount)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestPostgres_buildGetAll{{ .PluralTitlecase }}CountQuery(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		p, _ := buildTestService(t)
		expectedQuery := "SELECT COUNT(id) FROM {{ .PluralLowercase }} WHERE archived_on IS NULL"

		actualQuery := p.buildGetAll{{ .PluralTitlecase }}CountQuery()
		assert.Equal(t, expectedQuery, actualQuery)
	})
}

func TestPostgres_GetAll{{ .PluralTitlecase }}Count(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedQuery := "SELECT COUNT(id) FROM {{ .PluralLowercase }} WHERE archived_on IS NULL"
		expectedCount := uint64(666)

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WillReturnRows(
				sqlmock.NewRows([]string{"count"}).AddRow(expectedCount),
			)

		actualCount, err := p.GetAll{{ .PluralTitlecase }}Count(context.Background())
		assert.NoError(t, err)
		assert.Equal(t, expectedCount, actualCount)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestPostgres_buildGet{{ .PluralTitlecase }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		p, _ := buildTestService(t)
		exampleUserID := uint64(321)

		expectedArgCount := 1
		expectedQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"

		actualQuery, args := p.buildGet{{ .PluralTitlecase }}Query(models.DefaultQueryFilter(), exampleUserID)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, exampleUserID, args[0].(uint64))
	})
}

func TestPostgres_Get{{ .PluralTitlecase }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .SingularTitlecase }}1 := &models.{{ .SingularTitlecase }}{
			Name: "name",
		}

		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"
		expectedCountQuery := "SELECT COUNT(id) FROM {{ .PluralLowercase }} WHERE archived_on IS NULL"
		expectedCount := uint64(666)

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildMockRowFrom{{ .SingularTitlecase }}(expected{{ .SingularTitlecase }}1),
			)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedCountQuery)).
			WillReturnRows(
				sqlmock.NewRows([]string{"count"}).AddRow(expectedCount),
			)

		expected := &models.{{ .SingularTitlecase }}List{
			Pagination: models.Pagination{
				Page:       1,
				Limit:      20,
				TotalCount: expectedCount,
			},
			{{ .PluralTitlecase }}: []models.{{ .SingularTitlecase }}{
				*expected{{ .SingularTitlecase }}1,
			},
		}

		actual, err := p.Get{{ .PluralTitlecase }}(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("surfaces sql.ErrNoRows", func(t *testing.T) {
		expectedUserID := uint64(123)
		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(sql.ErrNoRows)

		actual, err := p.Get{{ .PluralTitlecase }}(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)
		assert.Equal(t, sql.ErrNoRows, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error executing read query", func(t *testing.T) {
		expectedUserID := uint64(123)

		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"
		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(errors.New("blah"))

		actual, err := p.Get{{ .PluralTitlecase }}(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error scanning {{ .SingularLowercase  }}", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .SingularTitlecase }}1 := &models.{{ .SingularTitlecase }}{
			Name: "name",
		}

		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildErroneousMockRowFrom{{ .SingularTitlecase }}(expected{{ .SingularTitlecase }}1),
			)

		actual, err := p.Get{{ .PluralTitlecase }}(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error querying for count", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .SingularTitlecase }}1 := &models.{{ .SingularTitlecase }}{
			Name: "name",
		}

		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1 LIMIT 20"
		expectedCountQuery := "SELECT COUNT(id) FROM {{ .PluralLowercase }} WHERE archived_on IS NULL"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildMockRowFrom{{ .SingularTitlecase }}(expected{{ .SingularTitlecase }}1),
			)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedCountQuery)).
			WillReturnError(errors.New("blah"))

		actual, err := p.Get{{ .PluralTitlecase }}(context.Background(), models.DefaultQueryFilter(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

}

func TestPostgres_GetAll{{ .PluralTitlecase }}ForUser(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .SingularTitlecase }} := &models.{{ .SingularTitlecase }}{
			Name: "name",
		}
		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildMockRowFrom{{ .SingularTitlecase }}(expected{{ .SingularTitlecase }}),
			)

		expected := []models.{{ .SingularTitlecase }}{*expected{{ .SingularTitlecase }}}

		actual, err := p.GetAll{{ .PluralTitlecase }}ForUser(context.Background(), expectedUserID)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("surfaces sql.ErrNoRows", func(t *testing.T) {
		expectedUserID := uint64(123)
		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(sql.ErrNoRows)

		actual, err := p.GetAll{{ .PluralTitlecase }}ForUser(context.Background(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)
		assert.Equal(t, sql.ErrNoRows, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error querying database", func(t *testing.T) {
		expectedUserID := uint64(123)
		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnError(errors.New("blah"))

		actual, err := p.GetAll{{ .PluralTitlecase }}ForUser(context.Background(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with unscannable response", func(t *testing.T) {
		expectedUserID := uint64(123)
		expected{{ .SingularTitlecase }} := &models.{{ .SingularTitlecase }}{
			Name: "name",
		}
		expectedListQuery := "SELECT id, name, details, created_on, updated_on, archived_on, belongs_to FROM {{ .PluralLowercase }} WHERE archived_on IS NULL AND belongs_to = $1"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedListQuery)).
			WithArgs(expectedUserID).
			WillReturnRows(
				buildErroneousMockRowFrom{{ .SingularTitlecase }}(expected{{ .SingularTitlecase }}),
			)

		actual, err := p.GetAll{{ .PluralTitlecase }}ForUser(context.Background(), expectedUserID)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestPostgres_buildCreate{{ .SingularTitlecase }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		p, _ := buildTestService(t)
		expected := &models.{{ .SingularTitlecase }}{
			Name:      "name",
			Details:   "details",
			BelongsTo: 123,
		}

		expectedArgCount := 3
		expectedQuery := "INSERT INTO {{ .PluralLowercase }} (name,details,belongs_to) VALUES ($1,$2,$3) RETURNING id, created_on"

		actualQuery, args := p.buildCreate{{ .SingularTitlecase }}Query(expected)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, expected.Name, args[0].(string))
		assert.Equal(t, expected.Details, args[1].(string))
		assert.Equal(t, expected.BelongsTo, args[2].(uint64))
	})
}

func TestPostgres_Create{{ .SingularTitlecase }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expected := &models.{{ .SingularTitlecase }}{
			ID:        123,
			Name:      "name",
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}
		expectedInput := &models.{{ .SingularTitlecase }}CreationInput{
			Name:      expected.Name,
			BelongsTo: expected.BelongsTo,
		}
		exampleRows := sqlmock.NewRows([]string{"id", "created_on"}).
			AddRow(expected.ID, uint64(time.Now().Unix()))

		expectedQuery := "INSERT INTO {{ .PluralLowercase }} (name,details,belongs_to) VALUES ($1,$2,$3) RETURNING id, created_on"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				expected.Name,
				expected.Details,
				expected.BelongsTo,
			).
			WillReturnRows(exampleRows)

		actual, err := p.Create{{ .SingularTitlecase }}(context.Background(), expectedInput)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error writing to database", func(t *testing.T) {
		expectedUserID := uint64(321)
		example := &models.{{ .SingularTitlecase }}{
			ID:        123,
			Name:      "name",
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}
		expectedInput := &models.{{ .SingularTitlecase }}CreationInput{
			Name:      example.Name,
			BelongsTo: example.BelongsTo,
		}

		expectedQuery := "INSERT INTO {{ .PluralLowercase }} (name,details,belongs_to) VALUES ($1,$2,$3) RETURNING id, created_on"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				example.Name,
				example.Details,
				example.BelongsTo,
			).
			WillReturnError(errors.New("blah"))

		actual, err := p.Create{{ .SingularTitlecase }}(context.Background(), expectedInput)
		assert.Error(t, err)
		assert.Nil(t, actual)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestPostgres_buildUpdate{{ .SingularTitlecase }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		p, _ := buildTestService(t)
		expected := &models.{{ .SingularTitlecase }}{
			ID:        321,
			Name:      "name",
			Details:   "details",
			BelongsTo: 123,
		}

		expectedArgCount := 4
		expectedQuery := "UPDATE {{ .PluralLowercase }} SET name = $1, details = $2, updated_on = extract(epoch FROM NOW()) WHERE belongs_to = $3 AND id = $4 RETURNING updated_on"

		actualQuery, args := p.buildUpdate{{ .SingularTitlecase }}Query(expected)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, expected.Name, args[0].(string))
		assert.Equal(t, expected.Details, args[1].(string))
		assert.Equal(t, expected.BelongsTo, args[2].(uint64))
		assert.Equal(t, expected.ID, args[3].(uint64))
	})
}

func TestPostgres_Update{{ .SingularTitlecase }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expected := &models.{{ .SingularTitlecase }}{
			ID:        123,
			Name:      "name",
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}
		exampleRows := sqlmock.NewRows([]string{"updated_on"}).
			AddRow(uint64(time.Now().Unix()))

		expectedQuery := "UPDATE {{ .PluralLowercase }} SET name = $1, details = $2, updated_on = extract(epoch FROM NOW()) WHERE belongs_to = $3 AND id = $4 RETURNING updated_on"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				expected.Name,
				expected.Details,
				expected.BelongsTo,
				expected.ID,
			).
			WillReturnRows(exampleRows)

		err := p.Update{{ .SingularTitlecase }}(context.Background(), expected)
		assert.NoError(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error writing to database", func(t *testing.T) {
		expectedUserID := uint64(321)
		example := &models.{{ .SingularTitlecase }}{
			ID:        123,
			Name:      "name",
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}

		expectedQuery := "UPDATE {{ .PluralLowercase }} SET name = $1, details = $2, updated_on = extract(epoch FROM NOW()) WHERE belongs_to = $3 AND id = $4 RETURNING updated_on"

		p, mockDB := buildTestService(t)
		mockDB.ExpectQuery(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				example.Name,
				example.Details,
				example.BelongsTo,
				example.ID,
			).
			WillReturnError(errors.New("blah"))

		err := p.Update{{ .SingularTitlecase }}(context.Background(), example)
		assert.Error(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}

func TestPostgres_buildArchive{{ .SingularTitlecase }}Query(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		p, _ := buildTestService(t)
		expected := &models.{{ .SingularTitlecase }}{
			ID:        321,
			Name:      "name",
			Details:   "details",
			BelongsTo: 123,
		}

		expectedArgCount := 2
		expectedQuery := "UPDATE {{ .PluralLowercase }} SET updated_on = extract(epoch FROM NOW()), archived_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND belongs_to = $1 AND id = $2 RETURNING archived_on"

		actualQuery, args := p.buildArchive{{ .SingularTitlecase }}Query(expected.ID, expected.BelongsTo)
		assert.Equal(t, expectedQuery, actualQuery)
		assert.Len(t, args, expectedArgCount)
		assert.Equal(t, expected.BelongsTo, args[0].(uint64))
		assert.Equal(t, expected.ID, args[1].(uint64))
	})
}

func TestPostgres_Archive{{ .SingularTitlecase }}(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		expectedUserID := uint64(321)
		expected := &models.{{ .SingularTitlecase }}{
			ID:        123,
			Name:      "name",
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}

		expectedQuery := "UPDATE {{ .PluralLowercase }} SET updated_on = extract(epoch FROM NOW()), archived_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND belongs_to = $1 AND id = $2 RETURNING archived_on"

		p, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				expected.BelongsTo,
				expected.ID,
			).
			WillReturnResult(sqlmock.NewResult(1, 1))

		err := p.Archive{{ .SingularTitlecase }}(context.Background(), expected.ID, expectedUserID)
		assert.NoError(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})

	T.Run("with error writing to database", func(t *testing.T) {
		expectedUserID := uint64(321)
		example := &models.{{ .SingularTitlecase }}{
			ID:        123,
			Name:      "name",
			BelongsTo: expectedUserID,
			CreatedOn: uint64(time.Now().Unix()),
		}

		expectedQuery := "UPDATE {{ .PluralLowercase }} SET updated_on = extract(epoch FROM NOW()), archived_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND belongs_to = $1 AND id = $2 RETURNING archived_on"

		p, mockDB := buildTestService(t)
		mockDB.ExpectExec(formatQueryForSQLMock(expectedQuery)).
			WithArgs(
				example.BelongsTo,
				example.ID,
			).
			WillReturnError(errors.New("blah"))

		err := p.Archive{{ .SingularTitlecase }}(context.Background(), example.ID, expectedUserID)
		assert.Error(t, err)

		assert.NoError(t, mockDB.ExpectationsWereMet(), "not all database expectations were met")
	})
}
