package integration

import (
	"context"
	"testing"

	"{{ .OutputRepository }}/models/v1"

	
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.opencensus.io/trace"
)

func check{{ .Name }}Equality(t *testing.T, expected, actual *models.{{ .Name }}) {
	t.Helper()

	assert.NotZero(t, actual.ID)
	{{ range $i, $field := .Fields }}
	assert.Equal(t, expected.{{ pascal $field.Name }}, actual.{{ pascal $field.Name }})
	{{ end }}
	assert.NotZero(t, actual.CreatedOn)
}

func buildDummy{{ .Name }}(t *testing.T) *models.{{ .Name }} {
	t.Helper()

	x := &models.{{ .Name }}CreationInput{
		{{ range $i, $field := .Fields }}
		{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
		{{ end }}
	}
	y, err := todoClient.Create{{ .Name }}(context.Background(), x)
	require.NoError(t, err)
	return y
}


func Test{{ .Name }}s(test *testing.T) {
	test.Parallel()

	test.Run("Creating", func(T *testing.T) {
		T.Run("should be createable", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ camelCase .Name }}
			expected := &models.{{ .Name }}{
					{{ range $i, $field := .Fields }}
					{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
					{{ end }}
				}
			premade, err := todoClient.Create{{ .Name }}(
				ctx,
				&models.{{ .Name }}CreationInput{
					{{ range $i, $field := .Fields }}
					{{ pascal $field.Name }}: expected.{{ pascal $field.Name }},
					{{ end }}
				})
			checkValueAndError(t, premade, err)

			// Assert {{ camelCase .Name }} equality
			check{{ .Name }}Equality(t, expected, premade)

			// Clean up
			err = todoClient.Archive{{ .Name }}(ctx, premade.ID)
			assert.NoError(t, err)

			actual, err := todoClient.Get{{ .Name }}(ctx, premade.ID)
			checkValueAndError(t, actual, err)
			check{{ .Name }}Equality(t, expected, actual)
			assert.NotZero(t, actual.ArchivedOn)
		})
	})

	test.Run("Listing", func(T *testing.T) {
		T.Run("should be able to be read in a list", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ camelCase .Name }}s
			var expected []*models.{{ .Name }}
			for i := 0; i < 5; i++ {
				expected = append(expected, buildDummy{{ .Name }}(t))
			}

			// Assert {{ camelCase .Name }} list equality
			actual, err := todoClient.Get{{ .Name }}s(ctx, nil)
			checkValueAndError(t, actual, err)
			assert.True(
				t,
				len(expected) <= len(actual.{{ .Name }}s),
				"expected %d to be <= %d",
				len(expected),
				len(actual.{{ .Name }}s),
			)

			// Clean up
			for _, {{ camelCase .Name }} := range actual.{{ .Name }}s {
				err = todoClient.Archive{{ .Name }}(ctx, {{ camelCase .Name }}.ID)
				assert.NoError(t, err)
			}
		})
	})

	test.Run("Reading", func(T *testing.T) {
		T.Run("it should return an error when trying to read something that doesn't exist", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// Fetch {{ camelCase .Name }}
			_, err := todoClient.Get{{ .Name }}(ctx, nonexistentID)
			assert.Error(t, err)
		})

		T.Run("it should be readable", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ camelCase .Name }}
			expected := &models.{{ .Name }}{
					{{ range $i, $field := .Fields }}
					{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
					{{ end }}
				}
			premade, err := todoClient.Create{{ .Name }}(
				ctx,
				&models.{{ .Name }}CreationInput{
					{{ range $i, $field := .Fields }}
					{{ pascal $field.Name }}: expected.{{ pascal $field.Name }},
					{{ end }}
				})
			checkValueAndError(t, premade, err)

			// Fetch {{ camelCase .Name }}
			actual, err := todoClient.Get{{ .Name }}(ctx, premade.ID)
			checkValueAndError(t, actual, err)

			// Assert {{ camelCase .Name }} equality
			check{{ .Name }}Equality(t, expected, actual)

			// Clean up
			err = todoClient.Archive{{ .Name }}(ctx, actual.ID)
			assert.NoError(t, err)
		})
	})

	test.Run("Updating", func(T *testing.T) {
		T.Run("it should return an error when trying to update something that doesn't exist", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			err := todoClient.Update{{ .Name }}(ctx, &models.{{ .Name }}{ID: nonexistentID})
			assert.Error(t, err)

		})

		T.Run("it should be updatable", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ camelCase .Name }}
			expected := &models.{{ .Name }}{
			{{ range $i, $field := .Fields }}
			{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
			{{ end }}
		}
			premade, err := todoClient.Create{{ .Name }}(
				tctx,
				&models.{{ .Name }}CreationInput{
					{{ range $i, $field := .Fields }}
					{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
					{{ end }}
				},
			)
			checkValueAndError(t, premade, err)

			// Change {{ camelCase .Name }}
			// CHANGEME
			err = todoClient.Update{{ .Name }}(ctx, premade)
			assert.NoError(t, err)

			// Fetch {{ camelCase .Name }}
			actual, err := todoClient.Get{{ .Name }}(ctx, premade.ID)
			checkValueAndError(t, actual, err)

			// Assert {{ camelCase .Name }} equality
			check{{ .Name }}Equality(t, expected, actual)
			assert.NotNil(t, actual.UpdatedOn)

			// Clean up
			err = todoClient.Archive{{ .Name }}(ctx, actual.ID)
			assert.NoError(t, err)
		})
	})

	test.Run("Deleting", func(T *testing.T) {
		T.Run("should be able to be deleted", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ camelCase .Name }}
			expected := &models.{{ .Name }}{
					{{ range $i, $field := .Fields }}
					{{ pascal $field.Name }}: {{ typeExample $field.Type $field.Pointer }},
					{{ end }}
				}
			premade, err := todoClient.Create{{ .Name }}(ctx,
				&models.{{ .Name }}CreationInput{
					{{ range $i, $field := .Fields }}
					{{ pascal $field.Name }}: expected.{{ pascal $field.Name }},
					{{ end }}
				})
			checkValueAndError(t, premade, err)

			// Clean up
			err = todoClient.Archive{{ .Name }}(ctx, premade.ID)
			assert.NoError(t, err)
		})
	})
}
