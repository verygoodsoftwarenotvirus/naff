package integration

import (
	"context"
	"testing"

	"{{ .OutputRepository }}/models/v1"

	"github.com/icrowley/fake"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.opencensus.io/trace"
)

func check{{ .SingularTitlecase }}Equality(t *testing.T, expected, actual *models.{{ .SingularTitlecase }}) {
	t.Helper()

	assert.NotZero(t, actual.ID)
	assert.Equal(t, expected.Name, actual.Name)
	assert.Equal(t, expected.Details, actual.Details)
	assert.NotZero(t, actual.CreatedOn)
}

func buildDummy{{ .SingularTitlecase }}(t *testing.T) *models.{{ .SingularTitlecase }} {
	t.Helper()

	x := &models.{{ .SingularTitlecase }}CreationInput{
		Name:    fake.Word(),
		Details: fake.Sentence(),
	}
	y, err := todoClient.Create{{ .SingularTitlecase }}(context.Background(), x)
	require.NoError(t, err)
	return y
}

func Test{{ .PluralTitlecase }}(test *testing.T) {
	test.Parallel()

	test.Run("Creating", func(T *testing.T) {
		T.Run("should be createable", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ .SingularLowercase  }}
			expected := &models.{{ .SingularTitlecase }}{Name: "name", Details: "details"}
			premade, err := todoClient.Create{{ .SingularTitlecase }}(
				ctx,
				&models.{{ .SingularTitlecase }}CreationInput{
					Name:    expected.Name,
					Details: expected.Details,
				})
			checkValueAndError(t, premade, err)

			// Assert {{ .SingularLowercase  }} equality
			check{{ .SingularTitlecase }}Equality(t, expected, premade)

			// Clean up
			err = todoClient.Archive{{ .SingularTitlecase }}(ctx, premade.ID)
			assert.NoError(t, err)

			actual, err := todoClient.Get{{ .SingularTitlecase }}(ctx, premade.ID)
			checkValueAndError(t, actual, err)
			check{{ .SingularTitlecase }}Equality(t, expected, actual)
			assert.NotZero(t, actual.ArchivedOn)
		})
	})

	test.Run("Listing", func(T *testing.T) {
		T.Run("should be able to be read in a list", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ .PluralLowercase }}
			var expected []*models.{{ .SingularTitlecase }}
			for i := 0; i < 5; i++ {
				expected = append(expected, buildDummy{{ .SingularTitlecase }}(t))
			}

			// Assert {{ .SingularLowercase  }} list equality
			actual, err := todoClient.Get{{ .PluralTitlecase }}(ctx, nil)
			checkValueAndError(t, actual, err)
			assert.True(
				t,
				len(expected) <= len(actual.{{ .PluralTitlecase }}),
				"expected %d to be <= %d",
				len(expected),
				len(actual.{{ .PluralTitlecase }}),
			)

			// Clean up
			for _, {{ .SingularLowercase  }} := range actual.{{ .PluralTitlecase }} {
				err = todoClient.Archive{{ .SingularTitlecase }}(ctx, {{ .SingularLowercase  }}.ID)
				assert.NoError(t, err)
			}
		})
	})

	test.Run("Reading", func(T *testing.T) {
		T.Run("it should return an error when trying to read something that doesn't exist", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// Fetch {{ .SingularLowercase  }}
			_, err := todoClient.Get{{ .SingularTitlecase }}(ctx, nonexistentID)
			assert.Error(t, err)
		})

		T.Run("it should be readable", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ .SingularLowercase  }}
			expected := &models.{{ .SingularTitlecase }}{Name: "name", Details: "details"}
			premade, err := todoClient.Create{{ .SingularTitlecase }}(
				ctx,
				&models.{{ .SingularTitlecase }}CreationInput{
					Name: expected.Name, Details: expected.Details,
				})
			checkValueAndError(t, premade, err)

			// Fetch {{ .SingularLowercase  }}
			actual, err := todoClient.Get{{ .SingularTitlecase }}(ctx, premade.ID)
			checkValueAndError(t, actual, err)

			// Assert {{ .SingularLowercase  }} equality
			check{{ .SingularTitlecase }}Equality(t, expected, actual)

			// Clean up
			err = todoClient.Archive{{ .SingularTitlecase }}(ctx, actual.ID)
			assert.NoError(t, err)
		})
	})

	test.Run("Updating", func(T *testing.T) {
		T.Run("it should return an error when trying to update something that doesn't exist", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			err := todoClient.Update{{ .SingularTitlecase }}(ctx, &models.{{ .SingularTitlecase }}{ID: nonexistentID})
			assert.Error(t, err)

		})

		T.Run("it should be updatable", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ .SingularLowercase  }}
			expected := &models.{{ .SingularTitlecase }}{Name: "new name", Details: "new details"}
			premade, err := todoClient.Create{{ .SingularTitlecase }}(
				tctx,
				&models.{{ .SingularTitlecase }}CreationInput{
					Name:    "old name",
					Details: "old details",
				},
			)
			checkValueAndError(t, premade, err)

			// Change {{ .SingularLowercase  }}
			premade.Name, premade.Details = expected.Name, expected.Details
			err = todoClient.Update{{ .SingularTitlecase }}(ctx, premade)
			assert.NoError(t, err)

			// Fetch {{ .SingularLowercase  }}
			actual, err := todoClient.Get{{ .SingularTitlecase }}(ctx, premade.ID)
			checkValueAndError(t, actual, err)

			// Assert {{ .SingularLowercase  }} equality
			check{{ .SingularTitlecase }}Equality(t, expected, actual)
			assert.NotNil(t, actual.UpdatedOn)

			// Clean up
			err = todoClient.Archive{{ .SingularTitlecase }}(ctx, actual.ID)
			assert.NoError(t, err)
		})
	})

	test.Run("Deleting", func(T *testing.T) {
		T.Run("should be able to be deleted", func(t *testing.T) {
			tctx := context.Background()
			ctx, span := trace.StartSpan(tctx, t.Name())
			defer span.End()

			// CreateHandler {{ .SingularLowercase  }}
			expected := &models.{{ .SingularTitlecase }}{Name: "name", Details: "details"}
			premade, err := todoClient.Create{{ .SingularTitlecase }}(ctx,
				&models.{{ .SingularTitlecase }}CreationInput{
					Name: expected.Name, Details: expected.Details,
				})
			checkValueAndError(t, premade, err)

			// Clean up
			err = todoClient.Archive{{ .SingularTitlecase }}(ctx, premade.ID)
			assert.NoError(t, err)
		})
	})
}
