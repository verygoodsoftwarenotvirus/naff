package {{ lower .Name }}s

import (
	"context"
	"net/http"

	"{{ .OutputRepository }}/internal/encoding/v1"
	"{{ .OutputRepository }}/internal/logging/v1"
	"{{ .OutputRepository }}/internal/metrics/v1"
	"{{ .OutputRepository }}/models/v1"

	"gitlab.com/verygoodsoftwarenotvirus/newsman"

	"github.com/pkg/errors"
)

const (
	// CreateMiddlewareCtxKey is a string alias we can use for referring to {{ camelCase .Name }} input data in contexts
	CreateMiddlewareCtxKey models.ContextKey = "{{ camelCase .Name }}_create_input"
	// UpdateMiddlewareCtxKey is a string alias we can use for referring to {{ camelCase .Name }} update data in contexts
	UpdateMiddlewareCtxKey models.ContextKey = "{{ camelCase .Name }}_update_input"

	counterName        metrics.CounterName = "{{ camelCase .Name }}s"
	counterDescription                     = "the number of {{ camelCase .Name }}s managed by the {{ camelCase .Name }}s service"
	topicName          string              = "{{ camelCase .Name }}s"
	serviceName        string              = "{{ camelCase .Name }}s_service"
)

var (
	_ models.{{ .Name }}DataServer = (*Service)(nil)
)

type (
	// Service handles to-do list {{ camelCase .Name }}s
	Service struct {
		logger         logging.Logger
		{{ camelCase .Name }}Counter    metrics.UnitCounter
		{{ camelCase .Name }}Database   models.{{ .Name }}DataManager
		userIDFetcher  UserIDFetcher
		{{ camelCase .Name }}IDFetcher  {{ .Name }}IDFetcher
		encoderDecoder encoding.EncoderDecoder
		reporter       newsman.Reporter
	}

	// UserIDFetcher is a function that fetches user IDs
	UserIDFetcher func(*http.Request) uint64

	// {{ .Name }}IDFetcher is a function that fetches {{ camelCase .Name }} IDs
	{{ .Name }}IDFetcher func(*http.Request) uint64
)

// Provide{{ .Name }}sService builds a new {{ .Name }}sService
func Provide{{ .Name }}sService(
	ctx context.Context,
	logger logging.Logger,
	db models.{{ .Name }}DataManager,
	userIDFetcher UserIDFetcher,
	{{ camelCase .Name }}IDFetcher {{ .Name }}IDFetcher,
	encoder encoding.EncoderDecoder,
	{{ camelCase .Name }}CounterProvider metrics.UnitCounterProvider,
	reporter newsman.Reporter,
) (*Service, error) {
	{{ camelCase .Name }}Counter, err := {{ camelCase .Name }}CounterProvider(counterName, counterDescription)
	if err != nil {
		return nil, errors.Wrap(err, "error initializing counter")
	}

	svc := &Service{
		logger:         logger.WithName(serviceName),
		{{ camelCase .Name }}Database:   db,
		encoderDecoder: encoder,
		{{ camelCase .Name }}Counter:    {{ camelCase .Name }}Counter,
		userIDFetcher:  userIDFetcher,
		{{ camelCase .Name }}IDFetcher:  {{ camelCase .Name }}IDFetcher,
		reporter:       reporter,
	}

	{{ camelCase .Name }}Count, err := svc.{{ camelCase .Name }}Database.GetAll{{ .Name }}sCount(ctx)
	if err != nil {
		return nil, errors.Wrap(err, "setting current {{ camelCase .Name }} count")
	}
	svc.{{ camelCase .Name }}Counter.IncrementBy(ctx, {{ camelCase .Name }}Count)

	return svc, nil
}
