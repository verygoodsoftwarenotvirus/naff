package {{ lower .Name }}s

import (
	"database/sql"
	"net/http"
	"strconv"

	"{{ .OutputRepository }}/models/v1"

	"gitlab.com/verygoodsoftwarenotvirus/newsman"

	"go.opencensus.io/trace"
)

const (
	// URIParamKey is a standard string that we'll use to refer to {{ camelCase .Name }} IDs with
	URIParamKey = "{{ camelCase .Name }}ID"
)

func attach{{ .Name }}IDToSpan(span *trace.Span, {{ camelCase .Name }}ID uint64) {
	if span != nil {
		span.AddAttributes(trace.StringAttribute("{{ camelCase .Name }}_id", strconv.FormatUint({{ camelCase .Name }}ID, 10)))
	}
}

func attachUserIDToSpan(span *trace.Span, userID uint64) {
	if span != nil {
		span.AddAttributes(trace.StringAttribute("user_id", strconv.FormatUint(userID, 10)))
	}
}

// ListHandler is our list route
func (s *Service) ListHandler(res http.ResponseWriter, req *http.Request) {
	ctx, span := trace.StartSpan(req.Context(), "ListHandler")
	defer span.End()

	// ensure query filter
	qf := models.ExtractQueryFilter(req)

	// determine user ID
	userID := s.userIDFetcher(req)
	logger := s.logger.WithValue("user_id", userID)

	attachUserIDToSpan(span, userID)

	// fetch {{ camelCase .Name }}s from database
	{{ camelCase .Name }}s, err := s.{{ camelCase .Name }}Database.Get{{ .Name }}s(ctx, qf, userID)
	if err == sql.ErrNoRows {
		// in the event no rows exist return an empty list
		{{ camelCase .Name }}s = &models.{{ .Name }}List{
			{{ .Name }}s: []models.{{ .Name }}{},
		}
	} else if err != nil {
		logger.Error(err, "error encountered fetching {{ camelCase .Name }}s")
		res.WriteHeader(http.StatusInternalServerError)
		return
	}

	// encode our response and peace
	if err = s.encoderDecoder.EncodeResponse(res, {{ camelCase .Name }}s); err != nil {
		s.logger.Error(err, "encoding response")
	}
}

// CreateHandler is our {{ camelCase .Name }} creation route
func (s *Service) CreateHandler(res http.ResponseWriter, req *http.Request) {
	ctx, span := trace.StartSpan(req.Context(), "CreateHandler")
	defer span.End()

	// determine user ID
	userID := s.userIDFetcher(req)
	attachUserIDToSpan(span, userID)
	logger := s.logger.WithValue("user_id", userID)

	// check request context for parsed input struct
	input, ok := ctx.Value(CreateMiddlewareCtxKey).(*models.{{ .Name }}CreationInput)
	logger = logger.WithValue("input", input)
	if !ok {
		logger.Info("valid input not attached to request")
		res.WriteHeader(http.StatusBadRequest)
		return
	}
	input.BelongsTo = userID

	// create {{ camelCase .Name }} in database
	x, err := s.{{ camelCase .Name }}Database.Create{{ .Name }}(ctx, input)
	if err != nil {
		s.logger.Error(err, "error creating {{ camelCase .Name }}")
		res.WriteHeader(http.StatusInternalServerError)
		return
	}

	// notify relevant parties of new {{ camelCase .Name }}
	s.{{ camelCase .Name }}Counter.Increment(ctx)
	attach{{ .Name }}IDToSpan(span, x.ID)
	s.reporter.Report(newsman.Event{
		Data:      x,
		Topics:    []string{topicName},
		EventType: string(models.Create),
	})

	// encode response and peace
	res.WriteHeader(http.StatusCreated)
	if err = s.encoderDecoder.EncodeResponse(res, x); err != nil {
		s.logger.Error(err, "encoding response")
	}
}

// ReadHandler returns a GET handler that returns an {{ camelCase .Name }}
func (s *Service) ReadHandler(res http.ResponseWriter, req *http.Request) {
	ctx, span := trace.StartSpan(req.Context(), "ReadHandler")
	defer span.End()

	// determine relevant info
	userID := s.userIDFetcher(req)
	{{ camelCase .Name }}ID := s.{{ camelCase .Name }}IDFetcher(req)

	// keep the aforementioned context in mind
	logger := s.logger.WithValues(map[string]interface{}{
		"user_id": userID,
		"{{ camelCase .Name }}_id": {{ camelCase .Name }}ID,
	})
	attach{{ .Name }}IDToSpan(span, {{ camelCase .Name }}ID)
	attachUserIDToSpan(span, userID)

	// fetch {{ camelCase .Name }} from database
	x, err := s.{{ camelCase .Name }}Database.Get{{ .Name }}(ctx, {{ camelCase .Name }}ID, userID)
	if err == sql.ErrNoRows {
		res.WriteHeader(http.StatusNotFound)
		return
	} else if err != nil {
		logger.Error(err, "error fetching {{ camelCase .Name }} from database")
		res.WriteHeader(http.StatusInternalServerError)
		return
	}

	// encode response and peace
	if err = s.encoderDecoder.EncodeResponse(res, x); err != nil {
		s.logger.Error(err, "encoding response")
	}
}

// UpdateHandler returns a handler that updates an {{ camelCase .Name }}
func (s *Service) UpdateHandler(res http.ResponseWriter, req *http.Request) {
	ctx, span := trace.StartSpan(req.Context(), "UpdateHandler")
	defer span.End()

	// check for parsed input attached to request context
	input, ok := ctx.Value(UpdateMiddlewareCtxKey).(*models.{{ .Name }}UpdateInput)
	if !ok {
		s.logger.Info("no input attached to request")
		res.WriteHeader(http.StatusBadRequest)
		return
	}

	// determine relevant info
	userID := s.userIDFetcher(req)
	{{ camelCase .Name }}ID := s.{{ camelCase .Name }}IDFetcher(req)

	// keep aforementioned context in mind
	logger := s.logger.WithValues(map[string]interface{}{
		"user_id": userID,
		"{{ camelCase .Name }}_id": {{ camelCase .Name }}ID,
	})
	attach{{ .Name }}IDToSpan(span, {{ camelCase .Name }}ID)
	attachUserIDToSpan(span, userID)

	// fetch {{ camelCase .Name }} from database
	x, err := s.{{ camelCase .Name }}Database.Get{{ .Name }}(ctx, {{ camelCase .Name }}ID, userID)
	if err == sql.ErrNoRows {
		res.WriteHeader(http.StatusNotFound)
		return
	} else if err != nil {
		logger.Error(err, "error encountered getting {{ camelCase .Name }}")
		res.WriteHeader(http.StatusInternalServerError)
		return
	}

	// update the data structure
	x.Update(input)

	// update {{ camelCase .Name }} in database
	if err = s.{{ camelCase .Name }}Database.Update{{ .Name }}(ctx, x); err != nil {
		logger.Error(err, "error encountered updating {{ camelCase .Name }}")
		res.WriteHeader(http.StatusInternalServerError)
		return
	}

	// notify relevant parties
	s.reporter.Report(newsman.Event{
		Data:      x,
		Topics:    []string{topicName},
		EventType: string(models.Update),
	})

	// encode response and peace
	if err = s.encoderDecoder.EncodeResponse(res, x); err != nil {
		s.logger.Error(err, "encoding response")
	}
}

// ArchiveHandler returns a handler that archives an {{ camelCase .Name }}
func (s *Service) ArchiveHandler(res http.ResponseWriter, req *http.Request) {
	ctx, span := trace.StartSpan(req.Context(), "ArchiveHandler")
	defer span.End()

	// determine relevant information
	userID := s.userIDFetcher(req)
	{{ camelCase .Name }}ID := s.{{ camelCase .Name }}IDFetcher(req)

	// keep aforementioned context in mind
	logger := s.logger.WithValues(map[string]interface{}{
		"{{ camelCase .Name }}_id": {{ camelCase .Name }}ID,
		"user_id": userID,
	})
	attach{{ .Name }}IDToSpan(span, {{ camelCase .Name }}ID)
	attachUserIDToSpan(span, userID)

	// archive the {{ camelCase .Name }} in the database
	err := s.{{ camelCase .Name }}Database.Archive{{ .Name }}(ctx, {{ camelCase .Name }}ID, userID)
	if err == sql.ErrNoRows {
		res.WriteHeader(http.StatusNotFound)
		return
	} else if err != nil {
		logger.Error(err, "error encountered deleting {{ camelCase .Name }}")
		res.WriteHeader(http.StatusInternalServerError)
		return
	}

	// notify relevant parties
	s.{{ camelCase .Name }}Counter.Decrement(ctx)
	s.reporter.Report(newsman.Event{
		EventType: string(models.Archive),
		Data:      &models.{{ .Name }}{ID: {{ camelCase .Name }}ID},
		Topics:    []string{topicName},
	})

	// peace
	res.WriteHeader(http.StatusNoContent)
}
