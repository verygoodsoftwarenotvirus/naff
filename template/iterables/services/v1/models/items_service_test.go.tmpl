package {{ lower .Name }}s

import (
	"context"
	"errors"
	"net/http"
	"testing"

	mencoding "{{ .OutputRepository }}/internal/encoding/v1/mock"
	"{{ .OutputRepository }}/internal/logging/v1/noop"
	"{{ .OutputRepository }}/internal/metrics/v1"
	mmetrics "{{ .OutputRepository }}/internal/metrics/v1/mock"
	mmodels "{{ .OutputRepository }}/models/v1/mock"

	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

func buildTestService() *Service {
	return &Service{
		logger:         noop.ProvideNoopLogger(),
		{{ camelCase .Name }}Counter:    &mmetrics.UnitCounter{},
		{{ camelCase .Name }}Database:   &mmodels.{{ .Name }}DataManager{},
		userIDFetcher:  func(req *http.Request) uint64 { return 0 },
		{{ camelCase .Name }}IDFetcher:  func(req *http.Request) uint64 { return 0 },
		encoderDecoder: &mencoding.EncoderDecoder{},
		reporter:       nil,
	}
}

func TestProvide{{ .Name }}sService(T *testing.T) {
	T.Parallel()

	T.Run("happy path", func(t *testing.T) {
		uc := &mmetrics.UnitCounter{}
		expectation := uint64(123)

		var ucp metrics.UnitCounterProvider = func(
			counterName metrics.CounterName,
			description string,
		) (metrics.UnitCounter, error) {
			return uc, nil
		}

		idm := &mmodels.{{ .Name }}DataManager{}
		idm.On("GetAll{{ .Name }}sCount", mock.Anything).
			Return(expectation, nil)

		uc.On("IncrementBy", expectation).Return()

		s, err := Provide{{ .Name }}sService(
			context.Background(),
			noop.ProvideNoopLogger(),
			idm,
			func(req *http.Request) uint64 { return 0 },
			func(req *http.Request) uint64 { return 0 },
			&mencoding.EncoderDecoder{},
			ucp,
			nil,
		)

		require.NotNil(t, s)
		require.NoError(t, err)
	})

	T.Run("with error providing unit counter", func(t *testing.T) {
		uc := &mmetrics.UnitCounter{}
		expectation := uint64(123)

		var ucp metrics.UnitCounterProvider = func(
			counterName metrics.CounterName,
			description string,
		) (metrics.UnitCounter, error) {
			return uc, errors.New("blah")
		}

		idm := &mmodels.{{ .Name }}DataManager{}
		idm.On("GetAll{{ .Name }}sCount", mock.Anything).
			Return(expectation, nil)

		uc.On("IncrementBy", expectation).Return()

		s, err := Provide{{ .Name }}sService(
			context.Background(),
			noop.ProvideNoopLogger(),
			idm,
			func(req *http.Request) uint64 { return 0 },
			func(req *http.Request) uint64 { return 0 },
			&mencoding.EncoderDecoder{},
			ucp,
			nil,
		)

		require.Nil(t, s)
		require.Error(t, err)
	})

	T.Run("with error fetching {{ camelCase .Name }} count", func(t *testing.T) {
		uc := &mmetrics.UnitCounter{}
		expectation := uint64(123)

		var ucp metrics.UnitCounterProvider = func(
			counterName metrics.CounterName,
			description string,
		) (metrics.UnitCounter, error) {
			return uc, nil
		}

		idm := &mmodels.{{ .Name }}DataManager{}
		idm.On("GetAll{{ .Name }}sCount", mock.Anything).
			Return(expectation, errors.New("blah"))

		uc.On("IncrementBy", expectation).Return()

		s, err := Provide{{ .Name }}sService(
			context.Background(),
			noop.ProvideNoopLogger(),
			idm,
			func(req *http.Request) uint64 { return 0 },
			func(req *http.Request) uint64 { return 0 },
			&mencoding.EncoderDecoder{},
			ucp,
			nil,
		)

		require.Nil(t, s)
		require.Error(t, err)
	})
}
